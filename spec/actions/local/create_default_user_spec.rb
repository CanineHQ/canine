# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Local::CreateDefaultUser, type: :action do
  let(:action) { described_class.execute(context) }
  let(:context) { LightService::Context.make }

  describe '.execute' do
    context 'when no user exists' do
      before do
        allow(ENV).to receive(:[]).with("CANINE_USERNAME").and_return(nil)
        allow(ENV).to receive(:[]).with("CANINE_PASSWORD").and_return(nil)
      end

      it 'creates a new user with a default email and password' do
        expect { action }.to change(User, :count).by(1)
        expect(context[:user].email).to match(/@example.com/)
        expect(context[:user].valid_password?('password')).to be(true)
      end

      it 'creates a default account for the new user' do
        expect { action }.to change(Account, :count).by(1)
        expect(context[:account].name).to eq('Default')
        expect(context[:account].owner).to eq(context[:user])
      end

      it 'associates the user with the account' do
        action
        expect(context[:user].accounts).to include(context[:account])
        expect(context[:account].users).to include(context[:user])
      end
    end

    context 'when a user already exists' do
      let!(:existing_user) { create(:user) }

      it 'does not create a new user' do
        expect { action }.not_to change(User, :count)
        expect(context[:user]).to eq(existing_user)
      end

      it 'creates an account if none exists for the user' do
        expect { action }.to change(Account, :count).by(1)
        expect(context[:account].owner).to eq(existing_user)
      end

      it 'associates the existing user with the new account' do
        action
        expect(context[:account].users).to include(existing_user)
      end
    end

    context 'when a user and account already exist' do
      let!(:existing_user) { create(:user) }
      let!(:existing_account) { create(:account, owner: existing_user) }

      it 'does not create a new user or account' do
        expect { action }.not_to change(User, :count)
        expect { action }.not_to change(Account, :count)
        expect(context[:user]).to eq(existing_user)
        expect(context[:account]).to eq(existing_account)
      end
    end

    context 'when an error occurs during user creation' do
      before do
        allow(User).to receive(:first).and_raise(ActiveRecord::RecordInvalid.new(User.new))
      end

      it 'raises an exception and does not create a user or account' do
        expect { action }.to raise_error(ActiveRecord::RecordInvalid)
        expect(User.count).to eq(0)
        expect(Account.count).to eq(0)
      end
    end
  end
end
