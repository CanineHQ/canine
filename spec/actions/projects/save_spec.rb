# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::Save do
  let(:user) { create(:user) }
  let(:project) { build(:project) }
  let(:action_context) { { project: project, user: user } }

  before do
    allow(ProjectCredentialProvider).to receive(:create!)
  end

  describe '.executed' do
    subject(:execute_action) { described_class.execute(action_context) }

    context 'when the action is successful' do
      it 'strips and downcases the repository URL' do
        project.repository_url = ' HTTP://EXAMPLE.COM/REPO '
        execute_action
        expect(project.repository_url).to eq('http://example.com/repo')
      end

      it 'saves the project' do
        expect { execute_action }.to change { project.persisted? }.from(false).to(true)
      end

      it 'creates a ProjectCredentialProvider' do
        execute_action
        expect(ProjectCredentialProvider).to have_received(:create!).with(project: project, provider: user.github_provider)
      end

      it 'promises the project' do
        context = execute_action
        expect(context.project).to eq(project)
      end
    end

    context 'when an error occurs during saving the project' do
      before do
        allow(project).to receive(:save!).and_raise(ActiveRecord::RecordInvalid.new(project))
      end

      it 'fails the context with an error message' do
        context = execute_action
        expect(context).to be_failure
        expect(context.message).to eq('Validation failed: Project is invalid')
      end

      it 'does not create a ProjectCredentialProvider' do
        execute_action
        expect(ProjectCredentialProvider).not_to have_received(:create!)
      end
    end

    context 'when an error occurs during ProjectCredentialProvider creation' do
      before do
        allow(ProjectCredentialProvider).to receive(:create!).and_raise(StandardError.new('Provider creation failed'))
      end

      it 'fails the context with an error message' do
        context = execute_action
        expect(context).to be_failure
        expect(context.message).to eq('Provider creation failed')
      end
    end
  end
end
