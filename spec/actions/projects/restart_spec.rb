# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::Restart do
  let(:project) { instance_double('Project') }
  let(:web_service) { instance_double('Service', web_service?: true, background_service?: false, cron_job?: false) }
  let(:background_service) { instance_double('Service', web_service?: false, background_service?: true, cron_job?: false) }
  let(:cron_service) { instance_double('Service', web_service?: false, background_service?: false, cron_job?: true) }
  let(:other_service) { instance_double('Service', web_service?: false, background_service?: false, cron_job?: false) }

  before do
    allow(project).to receive(:services).and_return([web_service, background_service, cron_service, other_service])
  end

  describe '.executed' do
    subject(:execute_action) { described_class.execute(project: project) }

    context 'when services include web and background services' do
      let(:deployment) { instance_double('K8::Stateless::Deployment') }

      before do
        allow(K8::Stateless::Deployment).to receive(:new).with(web_service).and_return(deployment)
        allow(K8::Stateless::Deployment).to receive(:new).with(background_service).and_return(deployment)
        allow(deployment).to receive(:restart)
      end

      it 'restarts web and background services' do
        execute_action

        expect(K8::Stateless::Deployment).to have_received(:new).with(web_service)
        expect(K8::Stateless::Deployment).to have_received(:new).with(background_service)
        expect(deployment).to have_received(:restart).twice
      end
    end

    context 'when services include cron jobs' do
      let(:cron_job) { instance_double('K8::Stateless::CronJob') }

      before do
        allow(K8::Stateless::CronJob).to receive(:new).with(cron_service).and_return(cron_job)
        allow(cron_job).to receive(:restart)
      end

      it 'restarts cron jobs' do
        execute_action

        expect(K8::Stateless::CronJob).to have_received(:new).with(cron_service)
        expect(cron_job).to have_received(:restart)
      end
    end

    context 'when services do not include web, background, or cron jobs' do
      it 'does not attempt to restart other services' do
        execute_action

        expect(K8::Stateless::Deployment).not_to have_received(:new).with(other_service)
        expect(K8::Stateless::CronJob).not_to have_received(:new).with(other_service)
      end
    end

    context 'when an error occurs during restart' do
      let(:deployment) { instance_double('K8::Stateless::Deployment') }

      before do
        allow(K8::Stateless::Deployment).to receive(:new).with(web_service).and_return(deployment)
        allow(deployment).to receive(:restart).and_raise(StandardError.new('restart error'))
      end

      it 'raises an error' do
        expect { execute_action }.to raise_error(StandardError, 'restart error')
      end
    end
  end
end
