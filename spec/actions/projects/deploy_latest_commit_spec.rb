# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::DeployLatestCommit, type: :action do
  let(:project) { create(:project, github_access_token: 'fake_token', repository_url: 'example/repo') }
  let(:current_user) { create(:user) }
  let(:client) { instance_double(Octokit::Client) }
  let(:commit) { instance_double(Sawyer::Resource, sha: 'abc123', commit: { message: 'Initial commit' }) }

  before do
    allow(Octokit::Client).to receive(:new).and_return(client)
    allow(client).to receive(:commits).with(project.repository_url).and_return([commit])
  end

  describe '.executed' do
    context 'when current_user is provided' do
      subject(:action) { described_class.execute(project: project, current_user: current_user) }

      it 'creates a new build with the latest commit' do
        expect { action }.to change { project.builds.count }.by(1)
      end

      it 'enqueues a Projects::BuildJob with the created build' do
        expect(Projects::BuildJob).to receive(:perform_later).with(instance_of(Build))
        action
      end

      it 'sets the current_user on the build' do
        action
        expect(project.builds.last.current_user).to eq(current_user)
      end
    end

    context 'when current_user is not provided' do
      let(:owner) { create(:user) }
      let(:project) { create(:project, account: create(:account, owner: owner), github_access_token: 'fake_token', repository_url: 'example/repo') }

      subject(:action) { described_class.execute(project: project) }

      it 'uses the project account owner as the current_user' do
        action
        expect(project.builds.last.current_user).to eq(owner)
      end
    end

    context 'when fetching the latest commit fails' do
      before do
        allow(client).to receive(:commits).and_raise(Octokit::Error.new('GitHub API error'))
      end

      it 'raises an error and does not create a build' do
        expect { described_class.execute(project: project, current_user: current_user) }.to raise_error(Octokit::Error)
        expect(project.builds.count).to eq(0)
      end
    end
  end
end
