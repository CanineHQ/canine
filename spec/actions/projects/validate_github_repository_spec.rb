# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::ValidateGithubRepository, type: :action do
  let(:project) { instance_double('Project', github_access_token: 'valid_token', repository_url: 'valid/repo', errors: ActiveModel::Errors.new(self)) }
  let(:client) { instance_double(Octokit::Client) }

  before do
    allow(Octokit::Client).to receive(:new).with(access_token: project.github_access_token).and_return(client)
  end

  describe '.executed' do
    subject(:execute_action) { described_class.execute(project: project) }

    context 'when the repository exists' do
      before do
        allow(client).to receive(:repository?).with(project.repository_url).and_return(true)
      end

      it 'does not add errors to the project' do
        execute_action
        expect(project.errors).to be_empty
      end

      it 'does not fail the context' do
        result = execute_action
        expect(result.failure?).to be_falsey
      end
    end

    context 'when the repository does not exist' do
      before do
        allow(client).to receive(:repository?).with(project.repository_url).and_return(false)
      end

      it 'adds an error to the project' do
        execute_action
        expect(project.errors[:repository_url]).to include('does not exist')
      end

      it 'fails the context' do
        result = execute_action
        expect(result.failure?).to be_truthy
      end
    end

    context 'when access to the repository is forbidden' do
      before do
        allow(client).to receive(:repository?).and_raise(Octokit::Forbidden.new('Forbidden access'))
      end

      it 'adds an access error to the project' do
        execute_action
        expect(project.errors[:repository_url]).to include('cannot be accessed, Forbidden access')
      end

      it 'fails the context' do
        result = execute_action
        expect(result.failure?).to be_truthy
      end
    end
  end
end
