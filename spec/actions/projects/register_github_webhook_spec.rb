# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::RegisterGithubWebhook do
  let(:project) { double('Project', github_access_token: 'fake_token', repository_url: 'https://github.com/test/repo') }
  let(:client) { instance_double(Octokit::Client) }
  let(:webhook_secret) { 'fake_secret' }

  before do
    allow(Octokit::Client).to receive(:new).with(access_token: project.github_access_token).and_return(client)
    allow(described_class).to receive(:webhook_secret).and_return(webhook_secret)
  end

  describe '.executed' do
    subject(:action) { described_class.execute(project: project) }

    context 'when the webhook is created successfully' do
      before do
        allow(client).to receive(:create_hook).and_return(true)
      end

      it 'does not fail the context' do
        expect(action).not_to be_failure
      end

      it 'creates a GitHub webhook with the correct parameters' do
        expect(client).to receive(:create_hook).with(
          project.repository_url,
          'web',
          {
            url: Rails.application.routes.url_helpers.inbound_webhooks_github_index_url,
            content_type: 'json',
            secret: webhook_secret
          },
          {
            events: ['push'],
            active: true
          }
        )
        action
      end
    end

    context 'when the webhook already exists' do
      before do
        allow(client).to receive(:create_hook).and_raise(Octokit::UnprocessableEntity.new(body: 'Hook already exists'))
      end

      it 'does not fail the context' do
        expect(action).not_to be_failure
      end
    end

    context 'when there is another error creating the webhook' do
      before do
        allow(client).to receive(:create_hook).and_raise(Octokit::UnprocessableEntity.new(body: 'Some other error'))
      end

      it 'fails the context with an appropriate message' do
        expect(action).to be_failure
        expect(action.message).to eq('Failed to create webhook')
      end
    end
  end

  describe '.webhook_secret' do
    context 'when the environment variable is present' do
      before do
        stub_const('ENV', 'OMNIAUTH_GITHUB_WEBHOOK_SECRET' => 'env_secret')
      end

      it 'returns the webhook secret from the environment variable' do
        expect(described_class.webhook_secret).to eq('env_secret')
      end
    end

    context 'when the environment variable is not present' do
      before do
        allow(Rails.application).to receive_message_chain(:credentials, :dig).with(Rails.env, :github).and_return({ webhook_secret: 'creds_secret' })
      end

      it 'returns the webhook secret from Rails credentials' do
        expect(described_class.webhook_secret).to eq('creds_secret')
      end
    end
  end
end
