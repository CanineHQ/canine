# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::Create, type: :service do
  let(:project) { build_stubbed(:project) }
  let(:params) { { repository_url: 'https://github.com/example/repo' } }
  let(:user) { build_stubbed(:user) }
  let(:steps) { [] }

  before do
    allow(Projects::ValidateGithubRepository).to receive(:execute).and_return(true)
    allow(Projects::Save).to receive(:execute).and_return(true)
    allow(Projects::RegisterGithubWebhook).to receive(:execute).and_return(true)
    allow(Projects::DeployLatestCommit).to receive(:execute).and_return(true)
  end

  describe '.call' do
    subject { described_class.call(project, params, user) }

    context 'when in non-local mode' do
      before do
        allow(Rails.application.config).to receive(:local_mode).and_return(false)
      end

      it 'executes all steps including RegisterGithubWebhook' do
        expect(Projects::ValidateGithubRepository).to receive(:execute)
        expect(Projects::Save).to receive(:execute)
        expect(Projects::RegisterGithubWebhook).to receive(:execute)
        expect(Projects::DeployLatestCommit).to receive(:execute)

        subject
      end
    end

    context 'when in local mode' do
      before do
        allow(Rails.application.config).to receive(:local_mode).and_return(true)
      end

      it 'executes steps without RegisterGithubWebhook' do
        expect(Projects::ValidateGithubRepository).to receive(:execute)
        expect(Projects::Save).to receive(:execute)
        expect(Projects::RegisterGithubWebhook).not_to receive(:execute)
        expect(Projects::DeployLatestCommit).to receive(:execute)

        subject
      end
    end

    context 'when a step fails' do
      before do
        allow(Projects::ValidateGithubRepository).to receive(:execute).and_raise(StandardError, 'Validation failed')
      end

      it 'raises an error and halts the process' do
        expect { subject }.to raise_error(StandardError, 'Validation failed')
      end
    end
  end
end
