# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Clusters::Install, type: :action do
  let(:cluster) { instance_double('Cluster') }
  let(:result) { instance_double('LightService::Organizer::WithReducer') }

  before do
    allow(cluster).to receive(:installing!)
    allow(cluster).to receive(:running!)
    allow(cluster).to receive(:failed!)
    allow(LightService::Organizer).to receive(:with).and_return(result)
    allow(result).to receive(:reduce)
  end

  describe '.call' do
    context 'when installation succeeds' do
      before do
        allow(result).to receive(:reduce).and_return(instance_double('SuccessResult', success?: true, failure?: false))
      end

      it 'sets the cluster to installing state' do
        described_class.call(cluster)
        expect(cluster).to have_received(:installing!)
      end

      it 'executes the installation pipeline' do
        described_class.call(cluster)
        expect(result).to have_received(:reduce).with(
          Clusters::IsReady,
          Clusters::CreateNamespace,
          Clusters::InstallNginxIngress,
          Clusters::InstallAcmeIssuer,
          Clusters::InstallMetricServer
        )
      end

      it 'sets the cluster to running state' do
        described_class.call(cluster)
        expect(cluster).to have_received(:running!)
      end
    end

    context 'when installation fails' do
      before do
        allow(result).to receive(:reduce).and_return(instance_double('FailureResult', success?: false, failure?: true))
      end

      it 'sets the cluster to installing state' do
        described_class.call(cluster)
        expect(cluster).to have_received(:installing!)
      end

      it 'executes the installation pipeline' do
        described_class.call(cluster)
        expect(result).to have_received(:reduce).with(
          Clusters::IsReady,
          Clusters::CreateNamespace,
          Clusters::InstallNginxIngress,
          Clusters::InstallAcmeIssuer,
          Clusters::InstallMetricServer
        )
      end

      it 'sets the cluster to failed state' do
        described_class.call(cluster)
        expect(cluster).to have_received(:failed!)
      end
    end

    context 'when an exception occurs' do
      before do
        allow(result).to receive(:reduce).and_raise(StandardError)
      end

      it 'sets the cluster to failed state' do
        expect { described_class.call(cluster) }.to raise_error(StandardError)
        expect(cluster).to have_received(:failed!)
      end

      it 'raises the error' do
        expect { described_class.call(cluster) }.to raise_error(StandardError)
      end
    end
  end
end
