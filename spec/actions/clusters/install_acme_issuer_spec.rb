# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Clusters::InstallAcmeIssuer, type: :action do
  let(:cluster) { instance_double('Cluster', kubeconfig: '{}', info: nil, success: nil, error: nil, failed!: nil) }
  let(:runner) { instance_double('Cli::RunAndLog') }
  let(:kubectl) { instance_double('K8::Kubectl') }

  before do
    allow(Cli::RunAndLog).to receive(:new).with(cluster).and_return(runner)
    allow(K8::Kubectl).to receive(:new).with(cluster.kubeconfig, runner).and_return(kubectl)
    allow(cluster).to receive(:account).and_return(OpenStruct.new(owner: OpenStruct.new(email: 'owner@example.com')))
  end

  describe '.executed' do
    context 'when acme issuer is already installed' do
      before do
        allow(kubectl).to receive(:call).with("get clusterissuer letsencrypt -n #{Clusters::Install::DEFAULT_NAMESPACE}").and_return(true)
      end

      it 'logs that acme issuer is already installed' do
        expect(cluster).to receive(:info).with("Checking if acme issuer is already installed", color: :yellow)
        expect(cluster).to receive(:success).with("Acme issuer is already installed")

        described_class.execute(cluster: cluster)
      end
    end

    context 'when acme issuer is not installed' do
      before do
        allow(kubectl).to receive(:call).and_raise(Cli::CommandFailedError.new('not found'))
      end

      it 'installs cert-manager and acme issuer' do
        allow(runner).to receive(:call).and_return(true)
        allow(kubectl).to receive(:apply_yaml)

        expect(cluster).to receive(:info).with("Acme issuer not detected, installing...", color: :yellow)
        expect(cluster).to receive(:info).with("Installing cert-manager...", color: :yellow)
        expect(cluster).to receive(:success).with("Cert-manager installed successfully")
        expect(cluster).to receive(:info).with("Installing acme issuer...", color: :yellow)
        expect(cluster).to receive(:success).with("Acme issuer installed")

        described_class.execute(cluster: cluster)
      end

      it 'handles failure in installing cert-manager' do
        allow(runner).to receive(:call).and_raise(Cli::CommandFailedError.new('failed'))

        expect(cluster).to receive(:failed!)
        expect(cluster).to receive(:error).with("Cert-manager failed to install")

        expect {
          described_class.execute(cluster: cluster)
        }.to raise_error(LightService::Context::FailAndReturn, "Script failed with exit code failed")
      end

      it 'handles failure in installing acme issuer' do
        allow(runner).to receive(:call).and_return(true)
        allow(kubectl).to receive(:apply_yaml).and_raise(StandardError.new('apply failed'))

        expect(cluster).to receive(:failed!)
        expect(cluster).to receive(:error).with("Acme issuer failed to install")

        described_class.execute(cluster: cluster)
      end
    end
  end
end
