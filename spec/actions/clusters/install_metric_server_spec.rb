# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Clusters::InstallMetricServer, type: :action do
  let(:cluster) { instance_double("Cluster", kubeconfig: kubeconfig) }
  let(:runner) { instance_double("Cli::RunAndLog") }
  let(:kubectl) { instance_double("K8::Kubectl") }
  let(:kubeconfig) { "fake_kubeconfig_content" }

  before do
    allow(Cli::RunAndLog).to receive(:new).with(cluster).and_return(runner)
    allow(K8::Kubectl).to receive(:new).with(kubeconfig, runner).and_return(kubectl)
  end

  describe '.executed' do
    subject(:execute_action) { described_class.execute(cluster: cluster) }

    context 'when the metric server is already installed' do
      before do
        allow(kubectl).to receive(:call).with("get deployment metrics-server -n kube-system").and_return(true)
        allow(cluster).to receive(:info)
        allow(cluster).to receive(:success)
      end

      it 'logs that the metric server is already installed' do
        expect(cluster).to receive(:info).with("Checking if metric server is already installed...", color: :yellow)
        expect(cluster).to receive(:success).with("Metric server ingress controller is already installed")
        execute_action
      end
    end

    context 'when the metric server is not installed' do
      before do
        allow(kubectl).to receive(:call).with("get deployment metrics-server -n kube-system").and_raise(Cli::CommandFailedError)
        allow(kubectl).to receive(:apply_yaml)
        allow(cluster).to receive(:info)
        allow(cluster).to receive(:success)
      end

      it 'installs the metric server' do
        expect(cluster).to receive(:info).with("Metric server not detected, installing...", color: :yellow)
        expect(kubectl).to receive(:apply_yaml).with(anything)
        expect(cluster).to receive(:success).with("Metric server installed successfully")
        execute_action
      end

      it 'applies the correct YAML file' do
        yaml_path = Rails.root.join("resources", "k8", "shared", "metrics_server.yaml")
        yaml_content = File.read(yaml_path)
        expect(kubectl).to receive(:apply_yaml).with(yaml_content)
        execute_action
      end
    end

    context 'when an exception is raised during YAML application' do
      before do
        allow(kubectl).to receive(:call).with("get deployment metrics-server -n kube-system").and_raise(Cli::CommandFailedError)
        allow(kubectl).to receive(:apply_yaml).and_raise(Cli::CommandFailedError)
        allow(cluster).to receive(:info)
        allow(cluster).to receive(:success)
      end

      it 'raises a CommandFailedError' do
        expect { execute_action }.to raise_error(Cli::CommandFailedError)
      end
    end
  end
end
