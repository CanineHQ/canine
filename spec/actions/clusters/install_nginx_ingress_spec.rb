# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Clusters::InstallNginxIngress, type: :action do
  let(:cluster) { double('Cluster', kubeconfig: 'test-kubeconfig') }
  let(:runner) { instance_double(Cli::RunAndLog) }
  let(:kubectl) { instance_double(K8::Kubectl) }
  let(:context) { LightService::Context.make(cluster: cluster) }

  before do
    allow(Cli::RunAndLog).to receive(:new).with(cluster).and_return(runner)
    allow(K8::Kubectl).to receive(:new).with(cluster.kubeconfig, runner).and_return(kubectl)
    allow(cluster).to receive(:info)
    allow(cluster).to receive(:success)
    allow(cluster).to receive(:error)
    allow(cluster).to receive(:failed!)
  end

  describe '.executed' do
    context 'when Nginx ingress controller is already installed' do
      before do
        allow(kubectl).to receive(:call).with('get deployment ingress-nginx-controller -n canine-system').and_return(true)
      end

      it 'logs that the Nginx ingress controller is already installed' do
        described_class.execute(context)
        expect(cluster).to have_received(:success).with('Nginx ingress controller is already installed')
      end
    end

    context 'when Nginx ingress controller is not installed' do
      before do
        allow(kubectl).to receive(:call).with('get deployment ingress-nginx-controller -n canine-system').and_raise(Cli::CommandFailedError)
        allow(runner).to receive(:call)
      end

      it 'logs the installation process and installs Nginx ingress controller' do
        described_class.execute(context)
        expect(cluster).to have_received(:info).with('Nginx ingress controller not detected, installing...', color: :yellow)
        expect(runner).to have_received(:call).with(/install_nginx_ingress.sh/, envs: hash_including("KUBECONFIG", "NAMESPACE"))
      end

      context 'when installation succeeds' do
        before do
          allow(runner).to receive(:call).and_return(double(success?: true))
        end

        it 'logs that the installation was successful' do
          described_class.execute(context)
          expect(cluster).to have_received(:success).with('Nginx ingress controller installed successfully')
        end
      end

      context 'when installation fails' do
        let(:error_message) { 'Command failed with exit code 1' }

        before do
          allow(runner).to receive(:call).and_raise(Cli::CommandFailedError, error_message)
        end

        it 'logs an error and fails the context' do
          described_class.execute(context)
          expect(cluster).to have_received(:failed!)
          expect(cluster).to have_received(:error).with('Nginx ingress controller failed to install')
          expect(context).to be_failure
          expect(context.message).to eq("Script failed with exit code #{error_message}")
        end
      end
    end
  end
end
