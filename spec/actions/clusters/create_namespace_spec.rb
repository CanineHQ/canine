# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Clusters::CreateNamespace, type: :action do
  describe '.executed' do
    let(:cluster) { instance_double('Cluster', kubeconfig: kubeconfig) }
    let(:kubeconfig) { 'fake-kubeconfig' }
    let(:context) { LightService::Context.make(cluster: cluster) }
    let(:runner) { instance_double(Cli::RunAndLog) }
    let(:kubectl) { instance_double(K8::Kubectl) }
    let(:namespace_yaml) { "---\nname: canine-system\n" }

    before do
      allow(Cli::RunAndLog).to receive(:new).with(cluster).and_return(runner)
      allow(K8::Kubectl).to receive(:new).with(kubeconfig, runner).and_return(kubectl)
      allow(K8::Namespace).to receive(:new).and_return(instance_double(K8::Namespace, to_yaml: namespace_yaml))
    end

    context 'when the namespace is created successfully' do
      before do
        allow(kubectl).to receive(:apply_yaml).with(namespace_yaml).and_return(true)
      end

      it 'applies the namespace YAML using kubectl' do
        described_class.executed(context)

        expect(kubectl).to have_received(:apply_yaml).with(namespace_yaml)
      end

      it 'does not fail the context' do
        described_class.executed(context)

        expect(context).not_to be_failure
      end
    end

    context 'when applying the namespace YAML fails' do
      before do
        allow(kubectl).to receive(:apply_yaml).with(namespace_yaml).and_raise(Cli::CommandFailedError, "Command failed")
      end

      it 'fails the context' do
        expect { described_class.executed(context) }.to raise_error(Cli::CommandFailedError)

        expect(context).to be_failure
      end
    end
  end
end
