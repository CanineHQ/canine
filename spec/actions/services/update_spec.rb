# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Services::Update, type: :action do
  let(:project) { create(:project) }
  let(:service) { create(:service, project: project) }
  let(:params) do
    {
      service: {
        name: "updated-service",
        command: "new-command",
        cron_schedule: { schedule: "0 0 * * *" }
      }
    }
  end

  describe '.executed' do
    subject(:action) { described_class.execute(context) }

    let(:context) { LightService::Testing::ContextFactory.make_from(described_class, service: service, params: params) }

    context 'when service is a cron job' do
      let(:service) { create(:cron_job_service, project: project) }

      it 'updates the service with permitted params' do
        expect(Service).to receive(:permitted_params).with(params).and_call_original
        action
        expect(service.reload.name).to eq("updated-service")
        expect(service.command).to eq("new-command")
      end

      it 'updates the cron schedule' do
        action
        expect(service.cron_schedule.reload.schedule).to eq("0 0 * * *")
      end

      it 'marks the service as updated' do
        action
        expect(service.reload.status).to eq("updated")
      end
    end

    context 'when service is not a cron job' do
      let(:service) { create(:web_service, project: project) }

      it 'updates the service with permitted params' do
        expect(Service).to receive(:permitted_params).with(params).and_call_original
        action
        expect(service.reload.name).to eq("updated-service")
        expect(service.command).to eq("new-command")
      end

      it 'does not update cron schedule' do
        expect(service.cron_schedule).to be_nil
        action
      end

      it 'marks the service as updated' do
        action
        expect(service.reload.status).to eq("updated")
      end
    end

    context 'when update fails' do
      before do
        allow(service).to receive(:update).and_return(false)
      end

      it 'does not update the service' do
        action
        expect(service.reload.name).not_to eq("updated-service")
      end

      it 'does not update cron schedule' do
        action
        expect(service.cron_schedule).to be_nil
      end

      it 'does not change the service status' do
        action
        expect(service.reload.status).to eq("pending")
      end
    end
  end
end
