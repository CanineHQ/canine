# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Services::Create, type: :action do
  describe '.call' do
    let(:service) { instance_double('Service', save!: true) }
    let(:params) do
      {
        service: {
          cron_schedule: {
            schedule: '*/5 * * * *'
          }
        }
      }
    end

    subject(:create_service) { described_class.call(service, params) }

    before do
      allow(Services::CreateAssociations).to receive(:execute)
      allow(Services::Save).to receive(:execute)
    end

    it 'calls Services::CreateAssociations' do
      create_service
      expect(Services::CreateAssociations).to have_received(:execute).with(service: service, params: params)
    end

    it 'calls Services::Save' do
      create_service
      expect(Services::Save).to have_received(:execute).with(service: service, params: params)
    end

    context 'when cron_schedule is present' do
      it 'creates a CronSchedule' do
        expect {
          create_service
        }.to change(CronSchedule, :count).by(1)
      end
    end

    context 'when cron_schedule is not present' do
      let(:params) { { service: {} } }

      it 'does not create a CronSchedule' do
        expect {
          create_service
        }.not_to change(CronSchedule, :count)
      end
    end

    context 'when service save fails' do
      let(:service) { instance_double('Service', save!: false) }

      before do
        allow(service).to receive(:save!).and_raise(ActiveRecord::RecordInvalid)
      end

      it 'raises an error' do
        expect { create_service }.to raise_error(ActiveRecord::RecordInvalid)
      end
    end
  end
end
