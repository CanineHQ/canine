# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Services::CreateAssociations do
  let(:service) { create(:service) }
  let(:schedule) { '0 0 * * *' } # Example cron schedule
  let(:params) { { service: { cron_schedule: { schedule: schedule } } } }

  describe '.executed' do
    subject(:action) { described_class.execute(service: service, params: params) }

    context 'when cron_schedule is present in params' do
      it 'creates a CronSchedule record' do
        expect { action }.to change(CronSchedule, :count).by(1)
      end

      it 'associates the CronSchedule with the service' do
        action
        cron_schedule = CronSchedule.last
        expect(cron_schedule.service).to eq(service)
        expect(cron_schedule.schedule).to eq(schedule)
      end
    end

    context 'when cron_schedule is not present in params' do
      let(:params) { { service: {} } }

      it 'does not create a CronSchedule record' do
        expect { action }.not_to change(CronSchedule, :count)
      end
    end

    context 'when cron_schedule is nil in params' do
      let(:params) { { service: { cron_schedule: nil } } }

      it 'does not create a CronSchedule record' do
        expect { action }.not_to change(CronSchedule, :count)
      end
    end

    context 'when schedule format is invalid' do
      let(:schedule) { 'invalid_schedule' }

      it 'raises a validation error' do
        expect { action }.to raise_error(ActiveRecord::RecordInvalid)
      end
    end
  end
end
