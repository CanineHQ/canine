# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOns::HelmChartDetails, type: :action do
  describe 'executing the action' do
    let(:query) { 'my-chart' }
    let(:response_body) { { 'data' => 'mocked_response' }.to_json }
    let(:successful_response) { instance_double(HTTParty::Response, parsed_response: JSON.parse(response_body)) }
    let(:context) { LightService::Context.make(query: query) }

    before do
      allow(HTTParty).to receive(:get).and_return(successful_response)
    end

    context 'when the request is successful' do
      it 'sets the response in the context' do
        AddOns::HelmChartDetails.execute(context)

        expect(context.response).to eq(JSON.parse(response_body))
      end

      it 'makes a request to the correct URL' do
        AddOns::HelmChartDetails.execute(context)

        expect(HTTParty).to have_received(:get).with("https://artifacthub.io/api/v1/packages/search?ts_query_web=#{query}")
      end
    end

    context 'when the request fails' do
      let(:failed_response) { instance_double(HTTParty::Response, parsed_response: nil) }

      before do
        allow(HTTParty).to receive(:get).and_return(failed_response)
      end

      it 'sets the response in the context as nil' do
        AddOns::HelmChartDetails.execute(context)

        expect(context.response).to be_nil
      end
    end

    context 'when there is an empty query' do
      let(:query) { '' }

      it 'makes a request with an empty query string' do
        AddOns::HelmChartDetails.execute(context)

        expect(HTTParty).to have_received(:get).with("https://artifacthub.io/api/v1/packages/search?ts_query_web=")
      end
    end

    context 'when there is a nil query' do
      let(:query) { nil }

      it 'raises an error due to nil query' do
        expect { AddOns::HelmChartDetails.execute(context) }.to raise_error(NoMethodError)
      end
    end
  end
end
