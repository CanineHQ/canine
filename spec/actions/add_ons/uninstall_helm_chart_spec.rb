# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOns::UninstallHelmChart, type: :action do
  let(:add_on) { instance_double('AddOn', name: 'test-addon', cluster: cluster, uninstalled!: true, destroy!: true) }
  let(:cluster) { instance_double('Cluster', kubeconfig: kubeconfig) }
  let(:kubeconfig) { { 'apiVersion' => 'v1', 'clusters' => [], 'contexts' => [], 'current-context' => '', 'kind' => 'Config', 'preferences' => {}, 'users' => [] } }
  let(:client) { instance_double('K8::Helm::Client') }
  let(:kubectl) { instance_double('K8::Kubectl') }
  let(:runner) { instance_double('Cli::RunAndLog') }
  
  before do
    allow(K8::Helm::Client).to receive(:new).with(cluster.kubeconfig, runner).and_return(client)
    allow(K8::Kubectl).to receive(:new).with(cluster.kubeconfig).and_return(kubectl)
  end

  describe '.executed' do
    context 'when the helm chart is installed' do
      before do
        allow(client).to receive(:ls).and_return([{ 'name' => 'test-addon' }])
        allow(client).to receive(:uninstall).with('test-addon', namespace: 'test-addon')
        allow(kubectl).to receive(:call).with('delete namespace test-addon')
      end

      it 'uninstalls the helm chart' do
        expect(client).to receive(:uninstall).with('test-addon', namespace: 'test-addon')
        described_class.execute(add_on: add_on)
      end

      it 'deletes the kubernetes namespace' do
        expect(kubectl).to receive(:call).with('delete namespace test-addon')
        described_class.execute(add_on: add_on)
      end

      it 'marks the add_on as uninstalled' do
        expect(add_on).to receive(:uninstalled!)
        described_class.execute(add_on: add_on)
      end

      it 'destroys the add_on' do
        expect(add_on).to receive(:destroy!)
        described_class.execute(add_on: add_on)
      end
    end

    context 'when the helm chart is not installed' do
      before do
        allow(client).to receive(:ls).and_return([{ 'name' => 'another-addon' }])
        allow(kubectl).to receive(:call).with('delete namespace test-addon')
      end

      it 'does not uninstall the helm chart' do
        expect(client).not_to receive(:uninstall)
        described_class.execute(add_on: add_on)
      end

      it 'deletes the kubernetes namespace' do
        expect(kubectl).to receive(:call).with('delete namespace test-addon')
        described_class.execute(add_on: add_on)
      end

      it 'marks the add_on as uninstalled' do
        expect(add_on).to receive(:uninstalled!)
        described_class.execute(add_on: add_on)
      end

      it 'destroys the add_on' do
        expect(add_on).to receive(:destroy!)
        described_class.execute(add_on: add_on)
      end
    end

    context 'when kubeconfig is invalid' do
      let(:kubeconfig) { nil }

      it 'raises an error' do
        expect { described_class.execute(add_on: add_on) }.to raise_error("Kubeconfig is required")
      end
    end
  end
end
