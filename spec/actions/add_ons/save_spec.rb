# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOns::Save, type: :action do
  let(:add_on) { double('AddOn', helm_chart?: false, save: true, metadata: {}, values: {}, errors: double('Errors', add: nil)) }

  before do
    allow(add_on).to receive(:chart_definition).and_return('template' => [])
    allow(add_on.values).to receive(:extend)
  end

  describe '.executed' do
    subject(:action) { described_class.execute(add_on: add_on) }

    context 'when saving is successful' do
      before do
        allow(described_class).to receive(:apply_template_to_values)
        allow(described_class).to receive(:fetch_package_details)
      end

      it 'applies template to values' do
        expect(described_class).to receive(:apply_template_to_values).with(add_on)
        action
      end

      it 'fetches package details' do
        expect(described_class).to receive(:fetch_package_details).with(add_on)
        action
      end

      it 'saves the add_on' do
        expect(add_on).to receive(:save)
        action
      end
    end

    context 'when an exception occurs' do
      before do
        allow(described_class).to receive(:apply_template_to_values).and_raise('Some error')
      end

      it 'adds an error to the add_on' do
        expect(add_on.errors).to receive(:add).with(:base, 'Some error')
        action
      end

      it 'fails the context' do
        expect(action).to be_failure
      end
    end
  end

  describe '.fetch_package_details' do
    context 'when add_on is a helm_chart' do
      let(:add_on) { double('AddOn', helm_chart?: true, metadata: { 'helm_chart.name' => 'test_chart', 'package_id' => '123' }, errors: double('Errors', add: nil)) }

      before do
        allow(described_class).to receive(:_fetch_package_details).and_return(package)
      end

      context 'when package details are fetched successfully' do
        let(:package) { { 'package_id' => '123' } }

        it 'fetches package details' do
          expect(described_class).to receive(:_fetch_package_details).with('test_chart', '123')
          described_class.fetch_package_details(add_on)
        end
      end

      context 'when fetching package details raises an error' do
        let(:package) { nil }

        it 'raises an error' do
          allow(described_class).to receive(:_fetch_package_details).and_raise('Failed to fetch package details')
          expect { described_class.fetch_package_details(add_on) }.to raise_error('Failed to fetch package details')
        end
      end
    end

    context 'when add_on is not a helm_chart' do
      it 'does not fetch package details' do
        expect(described_class).not_to receive(:_fetch_package_details)
        described_class.fetch_package_details(add_on)
      end
    end
  end

  describe '.apply_template_to_values' do
    let(:add_on) { double('AddOn', metadata: { 'template' => { 'key1' => 'value1', 'key2' => { 'type' => 'size', 'value' => 10, 'unit' => 'MB' } } }, values: {}, chart_definition: { 'template' => [{ 'key' => 'key1', 'type' => 'string' }] }) }

    before do
      allow(add_on.values).to receive(:extend)
      allow(add_on.values).to receive(:dotset)
    end

    it 'extends values with DotSettable' do
      expect(add_on.values).to receive(:extend).with(DotSettable)
      described_class.apply_template_to_values(add_on)
    end

    it 'sets values using dotset' do
      expect(add_on.values).to receive(:dotset).with('key1', 'value1')
      expect(add_on.values).to receive(:dotset).with('key2', '10MB')
      described_class.apply_template_to_values(add_on)
    end
  end
end
