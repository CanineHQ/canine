# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Networks::CheckDns do
  let(:ingress) { double('Ingress', ip_address: '192.168.1.1', service: service) }
  let(:service) { double('Service', domains: [domain1, domain2]) }
  let(:domain1) { double('Domain', domain_name: 'example.com', update: true) }
  let(:domain2) { double('Domain', domain_name: 'test.com', update: true) }

  before do
    allow(Resolv::DNS).to receive(:open).and_yield(dns)
    allow(dns).to receive(:getresources).with('example.com', Resolv::DNS::Resource::IN::A).and_return([double('Resource', address: '192.168.1.1')])
    allow(dns).to receive(:getresources).with('test.com', Resolv::DNS::Resource::IN::A).and_return([double('Resource', address: '192.168.1.2')])
  end

  describe '.executed' do
    subject(:execute_action) { described_class.execute(ingress: ingress) }

    let(:dns) { double('DNS') }

    context 'when DNS record matches expected IP' do
      it 'updates the domain status to dns_verified' do
        expect(domain1).to receive(:update).with(status: :dns_verified)
        execute_action
      end
    end

    context 'when DNS record does not match expected IP' do
      it 'updates the domain status to dns_incorrect with a reason' do
        expect(domain2).to receive(:update).with(status: :dns_incorrect, status_reason: "DNS record (192.168.1.2) does not match expected IP address (192.168.1.1)")
        execute_action
      end
    end

    context 'when no DNS records are found' do
      before do
        allow(dns).to receive(:getresources).with('example.com', Resolv::DNS::Resource::IN::A).and_return([])
      end

      it 'updates the domain status to dns_incorrect with a reason' do
        expect(domain1).to receive(:update).with(status: :dns_incorrect, status_reason: "DNS record () does not match expected IP address (192.168.1.1)")
        execute_action
      end
    end
  end
end
