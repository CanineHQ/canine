# Autogenerated by autotester

require 'rails_helper'

RSpec.describe InboundWebhook, type: :model do
  describe 'schema' do
    it { is_expected.to have_db_column(:id).of_type(:bigint) }
    it { is_expected.to have_db_column(:body).of_type(:text) }
    it { is_expected.to have_db_column(:status).of_type(:integer).with_options(default: 'pending') }
    it { is_expected.to have_db_column(:created_at).of_type(:datetime).with_options(null: false) }
    it { is_expected.to have_db_column(:updated_at).of_type(:datetime).with_options(null: false) }
  end

  describe 'enums' do
    it { is_expected.to define_enum_for(:status).with_values(%i[pending processing processed failed]) }
  end

  describe 'callbacks' do
    let(:inbound_webhook) { create(:inbound_webhook) }

    context 'when status changes to processed' do
      before do
        allow(InboundWebhooks::IncinerationJob).to receive(:set).and_return(InboundWebhooks::IncinerationJob)
        allow(InboundWebhooks::IncinerationJob).to receive(:perform_later)
        inbound_webhook.update(status: :processed)
      end

      it 'calls incinerate_later' do
        expect(InboundWebhooks::IncinerationJob).to have_received(:set).with(wait: InboundWebhook.incinerate_after)
        expect(InboundWebhooks::IncinerationJob).to have_received(:perform_later).with(inbound_webhook)
      end
    end

    context 'when status does not change to processed' do
      before do
        allow(InboundWebhooks::IncinerationJob).to receive(:set)
        inbound_webhook.update(status: :failed)
      end

      it 'does not call incinerate_later' do
        expect(InboundWebhooks::IncinerationJob).not_to have_received(:set)
      end
    end

    context 'when status changes but not to processed' do
      before do
        allow(InboundWebhooks::IncinerationJob).to receive(:set)
        inbound_webhook.update(status: :processing)
      end

      it 'does not call incinerate_later' do
        expect(InboundWebhooks::IncinerationJob).not_to have_received(:set)
      end
    end
  end

  describe 'incinerate_later' do
    let(:inbound_webhook) { create(:processed_webhook) }

    it 'schedules InboundWebhooks::IncinerationJob' do
      allow(InboundWebhooks::IncinerationJob).to receive(:set).and_call_original
      allow(InboundWebhooks::IncinerationJob).to receive(:perform_later)

      inbound_webhook.incinerate_later

      expect(InboundWebhooks::IncinerationJob).to have_received(:set).with(wait: InboundWebhook.incinerate_after)
      expect(InboundWebhooks::IncinerationJob).to have_received(:perform_later).with(inbound_webhook)
    end
  end
end
