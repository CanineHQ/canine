# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Domain, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:service) }
    it { is_expected.to have_one(:project).through(:service) }
    it { is_expected.to have_one(:cluster).through(:project) }
  end

  describe 'validations' do
    subject { create(:domain) }

    it { is_expected.to validate_presence_of(:domain_name) }
    it { is_expected.to validate_uniqueness_of(:domain_name).scoped_to(:service_id) }

    context 'when domain name does not have a TLD' do
      it 'is not valid' do
        domain = build(:domain, domain_name: 'example')
        expect(domain).not_to be_valid
        expect(domain.errors[:domain_name]).to include('is not valid')
      end
    end

    context 'when domain name has a TLD' do
      it 'is valid' do
        domain = build(:domain, domain_name: 'example.com')
        expect(domain).to be_valid
      end
    end
  end

  describe 'callbacks' do
    context 'before save' do
      let(:domain) { build(:domain, domain_name: 'HTTPS://Example.COM') }

      it 'downcases the domain name' do
        domain.save
        expect(domain.domain_name).to eq('example.com')
      end

      it 'strips the protocol from the domain name' do
        domain.save
        expect(domain.domain_name).to eq('example.com')
      end
    end
  end

  describe 'enums' do
    it 'defines the correct statuses' do
      expect(described_class.statuses).to include('checking_dns' => 0, 'dns_verified' => 1, 'dns_incorrect' => 2)
    end
  end

  describe 'edge cases' do
    context 'when domain name includes protocol' do
      it 'strips http protocol' do
        domain = create(:domain, domain_name: 'http://example.com')
        expect(domain.domain_name).to eq('example.com')
      end

      it 'strips https protocol' do
        domain = create(:domain, domain_name: 'https://example.com')
        expect(domain.domain_name).to eq('example.com')
      end
    end

    context 'when domain name is already downcased and protocol stripped' do
      it 'does not alter the domain name' do
        domain = create(:domain, domain_name: 'example.com')
        expect(domain.domain_name).to eq('example.com')
      end
    end
  end
end
