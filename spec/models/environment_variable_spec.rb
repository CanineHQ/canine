# Autogenerated by autotester

require 'rails_helper'

RSpec.describe EnvironmentVariable, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:project) }
  end

  describe 'validations' do
    let!(:project) { create(:project) }
    subject { build(:environment_variable, project: project) }

    it { is_expected.to validate_presence_of(:name) }
    it { is_expected.to validate_uniqueness_of(:name).scoped_to(:project_id) }
    it { is_expected.to allow_value('VALID_NAME').for(:name) }
    it { is_expected.not_to allow_value('Invalid-Name').for(:name).with_message("can only contain uppercase letters, numbers, and underscores") }

    it { is_expected.to validate_presence_of(:value) }
    it { is_expected.to allow_value('valid_value').for(:value) }
    it { is_expected.not_to allow_value('invalid$value').for(:value).with_message("cannot contain special characters that might enable command injection") }
  end

  describe 'callbacks' do
    let(:environment_variable) { build(:environment_variable, name: ' test ', value: ' value ') }

    it 'strips whitespace from name before saving' do
      environment_variable.save
      expect(environment_variable.name).to eq('TEST')
    end

    it 'strips whitespace from value before saving' do
      environment_variable.save
      expect(environment_variable.value).to eq('value')
    end
  end

  describe 'business logic' do
    context 'when creating an event' do
      let(:project) { create(:project) }
      let(:environment_variable) { build(:environment_variable, project: project) }
      let(:current_user) { create(:user) }

      before do
        environment_variable.current_user = current_user
      end

      it 'creates an event after the environment variable is created' do
        expect { environment_variable.save }.to change { Event.count }.by(1)
      end

      it 'associates the event with the correct user and project' do
        environment_variable.save
        event = environment_variable.events.last
        expect(event.user).to eq(current_user)
        expect(event.project).to eq(project)
      end

      it 'sets the correct event action' do
        environment_variable.save
        expect(environment_variable.events.last.event_action).to eq('create')
      end
    end
  end
end
