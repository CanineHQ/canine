# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Provider, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:user) }
  end

  describe 'scopes' do
    context 'when using the provider scope' do
      before do
        create(:provider, provider: 'twitter')
        create(:provider, provider: 'facebook')
      end

      it 'returns providers of the specific type' do
        expect(Provider.twitter.count).to eq(1)
        expect(Provider.facebook.count).to eq(1)
      end
    end
  end

  describe '#client' do
    let(:provider) { create(:provider, provider: 'twitter') }

    it 'calls the provider-specific client method' do
      expect(provider).to receive(:twitter_client)
      provider.client
    end
  end

  describe '#expired?' do
    context 'when expires_at is nil' do
      let(:provider) { create(:provider, expires_at: nil) }

      it 'returns false' do
        expect(provider.expired?).to be_falsey
      end
    end

    context 'when expires_at is in the future' do
      let(:provider) { create(:provider, expires_at: 1.hour.from_now) }

      it 'returns false' do
        expect(provider.expired?).to be_falsey
      end
    end

    context 'when expires_at is in the past' do
      let(:provider) { create(:provider, :expired) }

      it 'returns true' do
        expect(provider.expired?).to be_truthy
      end
    end
  end

  describe '#access_token' do
    context 'when the token is not expired' do
      let(:provider) { create(:provider) }

      it 'returns the access token without refreshing' do
        expect(provider).not_to receive(:twitter_refresh_token!)
        expect(provider.access_token).to be_present
      end
    end

    context 'when the token is expired' do
      let(:provider) { create(:provider, :expired) }

      it 'refreshes and returns the new access token' do
        allow(provider).to receive(:twitter_refresh_token!)
        expect(provider).to receive(:twitter_refresh_token!).with(any_args)
        provider.access_token
      end
    end
  end

  describe '#twitter_client' do
    let(:provider) { create(:provider, provider: 'twitter') }

    it 'returns a configured Twitter client' do
      client = provider.twitter_client
      expect(client).to be_a(Twitter::REST::Client)
      expect(client.consumer_key).to eq(Rails.application.secrets.twitter_app_id)
      expect(client.consumer_secret).to eq(Rails.application.secrets.twitter_app_secret)
      expect(client.access_token).to eq(provider.access_token)
      expect(client.access_token_secret).to eq(provider.access_token_secret)
    end
  end
end
