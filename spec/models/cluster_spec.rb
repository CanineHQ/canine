# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Cluster, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:account) }
    it { is_expected.to have_many(:projects).dependent(:destroy) }
    it { is_expected.to have_many(:add_ons).dependent(:destroy) }
    it { is_expected.to have_many(:domains).through(:projects) }
    it { is_expected.to have_many(:metrics).dependent(:destroy) }
    it { is_expected.to have_many(:users).through(:account) }
  end

  describe 'validations' do
    subject { create(:cluster) }

    it { is_expected.to validate_presence_of(:name) }
    it { is_expected.to validate_uniqueness_of(:name).scoped_to(:account_id) }
    it { is_expected.to validate_format_of(:name).with(/\A[a-z0-9-]+\z/).with_message("must be lowercase, numbers, and hyphens only") }
  end

  describe 'enums' do
    it { is_expected.to define_enum_for(:status).with_values(initializing: 0, installing: 1, running: 2, failed: 3, destroying: 4) }
    it { is_expected.to define_enum_for(:cluster_type).with_values(k8s: 0, k3s: 1) }
  end

  describe 'callbacks' do
    it 'broadcasts refreshes when a cluster is created' do
      cluster = build(:cluster)
      expect { cluster.save }.to have_broadcasted_to("clusters").with(hash_including(type: 'refresh'))
    end

    context 'when loggable' do
      it 'creates a log output after creation' do
        cluster = create(:cluster)
        expect(cluster.log_output).not_to be_nil
      end
    end
  end

  describe '#info' do
    let(:cluster) { create(:cluster) }

    it 'logs info with default color' do
      expect(Rails.logger).to receive(:info).with("Test log line")
      cluster.info("Test log line")
    end

    it 'logs info with specific color' do
      colored_output = "\e[32mTest success line\e[0m\n"
      expect(Rails.logger).to receive(:info).with("Test success line")
      cluster.success("Test success line")
      expect(cluster.log_output.output).to include(colored_output)
    end
  end

  describe '#error' do
    let(:cluster) { create(:cluster) }

    it 'logs error in red' do
      colored_output = "\e[31mTest error line\e[0m\n"
      expect(Rails.logger).to receive(:info).with("Test error line")
      cluster.error("Test error line")
      expect(cluster.log_output.output).to include(colored_output)
    end
  end

  describe '#success' do
    let(:cluster) { create(:cluster) }

    it 'logs success in green' do
      colored_output = "\e[32mTest success line\e[0m\n"
      expect(Rails.logger).to receive(:info).with("Test success line")
      cluster.success("Test success line")
      expect(cluster.log_output.output).to include(colored_output)
    end
  end

  describe 'edge cases' do
    context 'when name is invalid' do
      it 'does not allow uppercase letters' do
        cluster = build(:cluster, name: 'InvalidName')
        expect(cluster).not_to be_valid
        expect(cluster.errors[:name]).to include("must be lowercase, numbers, and hyphens only")
      end

      it 'does not allow special characters' do
        cluster = build(:cluster, name: 'invalid#name')
        expect(cluster).not_to be_valid
        expect(cluster.errors[:name]).to include("must be lowercase, numbers, and hyphens only")
      end
    end
  end
end
