# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Metric, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:cluster) }
  end

  describe 'enums' do
    it { should define_enum_for(:metric_type).with_values(cpu: 0, memory: 1, storage: 2) }
  end

  describe 'scopes' do
    let!(:cluster) { create(:cluster) }
    let!(:metric_with_node_only_tag) { create(:metric, :with_node_only_tag, cluster: cluster) }
    let!(:metric_with_multiple_tags) { create(:metric, cluster: cluster) }
    let(:project) { double('Project', name: 'test_project') }
    let!(:metric_for_project) { create(:metric, :for_specific_project, cluster: cluster, project_name: 'test_project') }

    describe '.node_only_tags' do
      it 'returns metrics with only one tag' do
        expect(Metric.node_only_tags).to include(metric_with_node_only_tag)
        expect(Metric.node_only_tags).not_to include(metric_with_multiple_tags)
      end
    end

    describe '.for_project' do
      it 'returns metrics for the given project' do
        expect(Metric.for_project(project)).to include(metric_for_project)
        expect(Metric.for_project(project)).not_to include(metric_with_multiple_tags)
      end
    end
  end

  describe '#tag_value' do
    let(:metric) { create(:metric, tags: ["namespace:test_namespace", "pod:test_pod"]) }

    it 'returns the value of a tag based on the key' do
      expect(metric.tag_value('namespace')).to eq('test_namespace')
      expect(metric.tag_value('pod')).to eq('test_pod')
    end

    it 'returns nil if the tag key does not exist' do
      expect(metric.tag_value('node')).to be_nil
    end
  end
end
