# Autogenerated by autotester

require 'rails_helper'

RSpec.describe CronSchedule, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:service) }
  end

  describe 'validations' do
    it { is_expected.to validate_presence_of(:schedule) }
  end

  describe 'database columns' do
    it { is_expected.to have_db_column(:id).of_type(:bigint) }
    it { is_expected.to have_db_column(:schedule).of_type(:string).with_options(null: false) }
    it { is_expected.to have_db_column(:service_id).of_type(:bigint).with_options(null: false) }
  end

  describe 'indexes' do
    it { is_expected.to have_db_index(:service_id) }
  end

  describe 'foreign keys' do
    it 'should have the correct foreign key for service_id' do
      expect(CronSchedule.reflect_on_association(:service).options[:foreign_key]).to eq(:service_id)
    end
  end

  describe 'edge cases' do
    let(:service) { create(:service) }

    context 'when schedule is empty' do
      it 'is invalid' do
        cron_schedule = CronSchedule.new(schedule: '', service: service)
        expect(cron_schedule).not_to be_valid
      end
    end

    context 'when service is missing' do
      it 'is invalid' do
        cron_schedule = CronSchedule.new(schedule: '0 0 * * *')
        expect(cron_schedule).not_to be_valid
      end
    end

    context 'when schedule is properly formatted' do
      it 'is valid' do
        cron_schedule = CronSchedule.new(schedule: '0 0 * * *', service: service)
        expect(cron_schedule).to be_valid
      end
    end
  end

  describe 'callbacks' do
    # Assuming there are callbacks to be tested, which are not present in the initial code
    # Example: after_save :some_method

    # it 'calls some_method after save' do
    #   cron_schedule = build(:cron_schedule)
    #   expect(cron_schedule).to receive(:some_method)
    #   cron_schedule.save
    # end
  end
end
