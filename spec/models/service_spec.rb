# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Service, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:project) }
    it { is_expected.to have_one(:cron_schedule).dependent(:destroy) }
    it { is_expected.to have_many(:domains).dependent(:destroy) }
  end

  describe 'validations' do
    subject { create(:service) }

    it { is_expected.to validate_presence_of(:name) }
    it { is_expected.to validate_uniqueness_of(:name).scoped_to(:project_id) }
    it { is_expected.to allow_value('valid-name-123').for(:name) }
    it { is_expected.not_to allow_value('Invalid Name').for(:name) }

    context 'when service type is cron_job' do
      subject { build(:service, :cron_job) }

      it { is_expected.to validate_presence_of(:cron_schedule) }
      it { is_expected.to validate_presence_of(:command) }
    end
  end

  describe 'enums' do
    it { is_expected.to define_enum_for(:service_type).with_values(web_service: 0, background_service: 1, cron_job: 2) }
    it { is_expected.to define_enum_for(:status).with_values(pending: 0, healthy: 1, unhealthy: 2, updated: 3) }
  end

  describe 'nested attributes' do
    it { is_expected.to accept_nested_attributes_for(:domains).allow_destroy(true) }
  end

  describe '#friendly_status' do
    context 'when service is not a web_service and is healthy' do
      subject { build(:service, service_type: :background_service, status: :healthy) }
      
      it 'returns "deployed"' do
        expect(subject.friendly_status).to eq('deployed')
      end
    end

    context 'when service is not healthy' do
      subject { build(:service, service_type: :web_service, status: :pending) }

      it 'returns the humanized status' do
        expect(subject.friendly_status).to eq('Pending')
      end
    end
  end

  describe '.permitted_params' do
    let(:params) do
      ActionController::Parameters.new(
        service: {
          service_type: 'web_service',
          command: 'start',
          name: 'test-service',
          container_port: 8080,
          healthcheck_url: 'http://example.com/health',
          replicas: 3,
          description: 'Service description',
          allow_public_networking: true
        }
      )
    end

    it 'permits the correct parameters' do
      permitted_params = Service.permitted_params(params)
      expect(permitted_params).to eq(
        'service_type' => 'web_service',
        'command' => 'start',
        'name' => 'test-service',
        'container_port' => 8080,
        'healthcheck_url' => 'http://example.com/health',
        'replicas' => 3,
        'description' => 'Service description',
        'allow_public_networking' => true
      )
    end
  end
end
