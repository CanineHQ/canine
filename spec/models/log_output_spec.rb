# Autogenerated by autotester

require 'rails_helper'

RSpec.describe LogOutput, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:loggable) }
  end

  describe 'callbacks' do
    let(:loggable) { double('Loggable', id: 1) }
    let(:log_output) { create(:log_output, loggable: loggable) }

    before do
      allow(log_output).to receive(:broadcast_replace_to)
      allow(loggable).to receive(:dom_id).and_return("dom_id")
    end

    context 'after update commit' do
      it 'broadcasts log output' do
        log_output.update(output: "New log output text")
        expect(log_output).to have_received(:broadcast_replace_to)
      end
    end
  end

  describe 'validations' do
    it 'is valid with valid attributes' do
      expect(build(:log_output)).to be_valid
    end

    it 'is invalid without a loggable_type' do
      log_output = build(:log_output, loggable_type: nil)
      expect(log_output).to_not be_valid
      expect(log_output.errors[:loggable_type]).to include("can't be blank")
    end

    it 'is invalid without a loggable_id' do
      log_output = build(:log_output, loggable_id: nil)
      expect(log_output).to_not be_valid
      expect(log_output.errors[:loggable_id]).to include("can't be blank")
    end
  end

  describe 'edge cases' do
    context 'with very long output' do
      it 'handles long output gracefully' do
        log_output = build(:log_output, :with_long_output)
        expect(log_output).to be_valid
      end
    end

    context 'with empty output' do
      it 'allows empty output' do
        log_output = build(:log_output, :with_empty_output)
        expect(log_output).to be_valid
      end
    end
  end
end
