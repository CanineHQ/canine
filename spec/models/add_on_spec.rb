# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOn, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:cluster) }
    it { is_expected.to have_one(:account).through(:cluster) }
  end

  describe 'validations' do
    subject { build(:add_on) }

    it { is_expected.to validate_presence_of(:chart_type) }
    it { is_expected.to validate_presence_of(:name) }
    it { is_expected.to validate_uniqueness_of(:name).scoped_to(:cluster_id) }
    it { is_expected.to allow_value('valid-name-123').for(:name) }
    it { is_expected.not_to allow_value('Invalid Name').for(:name).with_message("must be lowercase, numbers, and hyphens only") }

    context 'when chart_type is helm_chart' do
      before { allow(subject).to receive(:helm_chart?).and_return(true) }

      it 'validates presence of package_details in metadata' do
        subject.metadata = {}
        subject.validate
        expect(subject.errors[:metadata]).to include("is missing required keys: package_details")
      end
    end

    context 'when chart_type is not helm_chart' do
      before { allow(subject).to receive(:helm_chart?).and_return(false) }

      it 'does not validate presence of package_details in metadata' do
        subject.metadata = {}
        subject.validate
        expect(subject.errors[:metadata]).to be_empty
      end
    end

    describe '#chart_type_exists' do
      context 'when chart_definition is nil' do
        before { allow(subject).to receive(:chart_definition).and_return(nil) }

        it 'adds error to chart_type' do
          subject.validate
          expect(subject.errors[:chart_type]).to include("does not exist")
        end
      end

      context 'when chart_definition is present' do
        before { allow(subject).to receive(:chart_definition).and_return(double) }

        it 'does not add error to chart_type' do
          subject.validate
          expect(subject.errors[:chart_type]).to be_empty
        end
      end
    end
  end

  describe 'enums' do
    it { is_expected.to define_enum_for(:status).with_values(installing: 0, installed: 1, uninstalling: 2, uninstalled: 3, failed: 4, updating: 5) }
  end

  describe 'instance methods' do
    let(:add_on) { build(:add_on) }

    describe '#helm_chart?' do
      it 'returns true if chart_type is helm_chart' do
        add_on.chart_type = 'helm_chart'
        expect(add_on.helm_chart?).to be true
      end

      it 'returns false if chart_type is not helm_chart' do
        add_on.chart_type = 'other_chart'
        expect(add_on.helm_chart?).to be false
      end
    end

    describe '#helm_chart_url' do
      it 'returns the repository from chart_definition if present' do
        allow(add_on).to receive(:chart_definition).and_return({ "repository" => "http://chart.repo" })
        expect(add_on.helm_chart_url).to eq("http://chart.repo")
      end

      it 'returns the repository from metadata if chart_definition is not present' do
        allow(add_on).to receive(:chart_definition).and_return(nil)
        add_on.metadata = { "repository" => "http://metadata.repo" }
        expect(add_on.helm_chart_url).to eq("http://metadata.repo")
      end
    end

    describe '#chart_definition' do
      it 'finds the chart definition by name' do
        allow(K8::Helm::Client::CHARTS).to receive(:[]).with("helm").and_return({
          "charts" => [{ "name" => "helm_chart", "repository" => "http://example.com" }]
        })
        expect(add_on.chart_definition).to eq({ "name" => "helm_chart", "repository" => "http://example.com" })
      end

      it 'returns nil if chart definition is not found' do
        allow(K8::Helm::Client::CHARTS).to receive(:[]).with("helm").and_return({
          "charts" => []
        })
        expect(add_on.chart_definition).to be_nil
      end
    end
  end
end
