# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AccountUser, type: :model do
  describe 'associations' do
    it { is_expected.to belong_to(:user) }
    it { is_expected.to belong_to(:account) }
  end

  describe 'validations' do
    context 'when account and user are present' do
      let(:account_user) { build(:account_user) }

      it 'is valid with valid attributes' do
        expect(account_user).to be_valid
      end
    end

    context 'when account is nil' do
      let(:account_user) { build(:account_user, account: nil) }

      it 'is not valid without an account' do
        expect(account_user).to_not be_valid
        expect(account_user.errors[:account]).to include("must exist")
      end
    end

    context 'when user is nil' do
      let(:account_user) { build(:account_user, user: nil) }

      it 'is not valid without a user' do
        expect(account_user).to_not be_valid
        expect(account_user.errors[:user]).to include("must exist")
      end
    end
  end

  describe 'database columns' do
    it { should have_db_column(:id).of_type(:bigint) }
    it { should have_db_column(:created_at).of_type(:datetime).with_options(null: false) }
    it { should have_db_column(:updated_at).of_type(:datetime).with_options(null: false) }
    it { should have_db_column(:account_id).of_type(:bigint).with_options(null: false) }
    it { should have_db_column(:user_id).of_type(:bigint).with_options(null: false) }
  end

  describe 'indexes' do
    it { should have_db_index(:account_id) }
    it { should have_db_index(:user_id) }
  end

  describe 'foreign keys' do
    it 'should have a foreign key on account_id' do
      expect(AccountUser.reflect_on_association(:account).options[:foreign_key]).to eq(:account_id)
    end

    it 'should have a foreign key on user_id' do
      expect(AccountUser.reflect_on_association(:user).options[:foreign_key]).to eq(:user_id)
    end
  end
end
