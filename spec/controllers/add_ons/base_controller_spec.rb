# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOns::BaseController, type: :controller do
  let(:account) { create(:account) }
  let(:user) { account.owner }
  let(:add_on) { create(:add_on, account: account, chart_type: chart_type) }
  
  before do
    sign_in user
    allow(controller).to receive(:current_account).and_return(account)
    allow(account.add_ons).to receive(:find).with(add_on.id.to_s).and_return(add_on)
  end

  describe '#set_service' do
    subject { controller.set_service }

    context 'when chart_type is redis' do
      let(:chart_type) { 'redis' }
      
      it 'assigns a Redis service' do
        subject
        expect(controller.instance_variable_get(:@service)).to be_a(K8::Helm::Redis)
      end
    end

    context 'when chart_type is postgresql' do
      let(:chart_type) { 'postgresql' }

      it 'assigns a Postgresql service' do
        subject
        expect(controller.instance_variable_get(:@service)).to be_a(K8::Helm::Postgresql)
      end
    end

    context 'when chart_type is unknown' do
      let(:chart_type) { 'unknown' }

      it 'assigns a generic Service' do
        subject
        expect(controller.instance_variable_get(:@service)).to be_a(K8::Helm::Service)
      end
    end
  end

  describe 'before_action set_add_on' do
    controller do
      def index
        render plain: "success"
      end
    end

    before { routes.draw { get 'index' => 'anonymous#index' } }

    it 'sets the @add_on variable' do
      get :index, params: { add_on_id: add_on.id }
      expect(assigns(:add_on)).to eq(add_on)
    end

    it 'calls set_service' do
      expect(controller).to receive(:set_service)
      get :index, params: { add_on_id: add_on.id }
    end

    context 'when add_on is not found' do
      it 'raises ActiveRecord::RecordNotFound' do
        expect {
          get :index, params: { add_on_id: 'invalid' }
        }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end
end
