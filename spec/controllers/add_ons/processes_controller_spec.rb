# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOns::ProcessesController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, owner: user) }
  let(:add_on) { create(:add_on, account: account) }
  let(:kubeconfig) { "mock_kubeconfig" }
  let(:client) { instance_double(K8::Client) }

  before do
    allow(controller).to receive(:current_user).and_return(user)
    allow(controller).to receive(:current_account).and_return(account)
    allow(K8::Client).to receive(:new).and_return(client)
    allow(add_on).to receive(:cluster).and_return(double(kubeconfig: kubeconfig))
    allow(account.add_ons).to receive(:find).and_return(add_on)
  end

  describe 'GET #index' do
    let(:pods) { [double(metadata: OpenStruct.new(name: 'pod1')), double(metadata: OpenStruct.new(name: 'pod2'))] }

    before do
      allow(client).to receive(:get_pods).and_return(pods)
      get :index, params: { add_on_id: add_on.id }
    end

    it 'assigns @pods' do
      expect(assigns(:pods)).to eq(pods)
    end

    it 'renders the index template' do
      expect(response).to render_template(:index)
    end
  end

  describe 'GET #show' do
    let(:logs) { "Log output" }
    let(:pod_id) { 'pod123' }

    before do
      allow(client).to receive(:get_pod_log).and_return(logs)
    end

    context 'when pod exists' do
      before do
        get :show, params: { add_on_id: add_on.id, id: pod_id }
      end

      it 'assigns @logs' do
        expect(assigns(:logs)).to eq(logs)
      end

      it 'renders the show template' do
        expect(response).to render_template(:show)
      end
    end

    context 'when pod does not exist' do
      before do
        allow(client).to receive(:get_pod_log).and_raise(StandardError, 'Pod not found')
        get :show, params: { add_on_id: add_on.id, id: pod_id }
      end

      it 'handles errors gracefully' do
        expect(response).to redirect_to(add_on_processes_path(add_on))
        expect(flash[:alert]).to eq('Pod not found')
      end
    end
  end
end
