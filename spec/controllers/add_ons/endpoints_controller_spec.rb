# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOns::EndpointsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, user: user) }
  let(:add_on) { create(:add_on, account: account) }
  let(:service) { instance_double(K8::Helm::Service) }
  let(:endpoints) { [instance_double(K8s::Resource, metadata: OpenStruct.new(name: 'test-endpoint'))] }
  let(:ingresses) { [] }
  let(:client) { instance_double(K8::Client) }

  before do
    allow(controller).to receive(:current_account).and_return(account)
    allow(K8::Client).to receive(:new).and_return(client)
    allow(controller).to receive(:set_service).and_return(service)
    allow(service).to receive(:get_endpoints).and_return(endpoints)
    allow(service).to receive(:get_ingresses).and_return(ingresses)
    sign_in user
  end

  describe 'GET #edit' do
    it 'assigns the requested endpoint as @endpoint' do
      get :edit, params: { add_on_id: add_on.id, id: 'test-endpoint' }
      expect(assigns(:endpoint)).to eq(endpoints.first)
    end

    it 'sets @ip_address using K8::Stateless::Ingress' do
      expect(K8::Stateless::Ingress).to receive(:ip_address).and_return('192.168.1.1')
      get :edit, params: { add_on_id: add_on.id, id: 'test-endpoint' }
      expect(assigns(:ip_address)).to eq('192.168.1.1')
    end
  end

  describe 'GET #show' do
    it 'aggregates all the services and ingresses' do
      get :show, params: { add_on_id: add_on.id }
      expect(assigns(:ingresses)).to eq(ingresses)
    end
  end

  describe 'PATCH #update' do
    context 'with valid params' do
      let(:valid_domains) { 'example.com, test.com' }
      let(:valid_port) { endpoints.first.spec.ports.first.port }

      before do
        allow_any_instance_of(K8::Kubectl).to receive(:apply_yaml).and_return(true)
      end

      it 'applies the YAML and renders the endpoint partial' do
        patch :update, params: { add_on_id: add_on.id, id: 'test-endpoint', domains: valid_domains, port: valid_port }
        expect(response).to render_template(partial: 'add_ons/endpoints/_endpoint')
      end

      it 'fetches ingresses after applying YAML' do
        expect(service).to receive(:get_ingresses).and_return(ingresses)
        patch :update, params: { add_on_id: add_on.id, id: 'test-endpoint', domains: valid_domains, port: valid_port }
        expect(assigns(:ingresses)).to eq(ingresses)
      end
    end

    context 'with invalid params' do
      let(:invalid_domains) { 'invalid-domain' }
      let(:invalid_port) { 9999 }

      it 'does not apply YAML and renders the edit template' do
        patch :update, params: { add_on_id: add_on.id, id: 'test-endpoint', domains: invalid_domains, port: invalid_port }
        expect(response).to render_template('add_ons/endpoints/edit')
        expect(assigns(:errors)).to include('Invalid domain format', 'Invalid port')
      end
    end

    context 'with an exception during update' do
      before do
        allow_any_instance_of(K8::Kubectl).to receive(:apply_yaml).and_raise(StandardError.new('Something went wrong'))
      end

      it 'rescues the exception and renders the edit template with an error message' do
        patch :update, params: { add_on_id: add_on.id, id: 'test-endpoint', domains: 'example.com', port: 80 }
        expect(response).to render_template('add_ons/endpoints/edit')
        expect(assigns(:errors)).to include('Something went wrong')
      end
    end
  end
end
