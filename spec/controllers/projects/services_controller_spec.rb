# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::ServicesController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, owner: user) }
  let(:project) { create(:project, account: account) }
  let(:service) { create(:service, project: project) }

  before do
    sign_in user
    allow(controller).to receive(:current_account).and_return(account)
  end

  describe 'GET #index' do
    it 'assigns all services as @services' do
      service
      get :index, params: { project_id: project.id }
      expect(assigns(:services)).to eq([service])
    end
  end

  describe 'GET #new' do
    it 'assigns a new service as @service' do
      get :new, params: { project_id: project.id }
      expect(assigns(:service)).to be_a_new(Service)
    end
  end

  describe 'POST #create' do
    let(:service_params) { attributes_for(:service) }

    context 'with valid params' do
      before do
        allow(Services::Create).to receive(:call).and_return(double(success?: true))
      end

      it 'redirects to the services index' do
        post :create, params: { project_id: project.id, service: service_params }
        expect(response).to redirect_to(project_services_path(project))
        expect(flash[:notice]).to eq('Service will be created on the next deploy.')
      end
    end

    context 'with invalid params' do
      before do
        allow(Services::Create).to receive(:call).and_return(double(success?: false))
      end

      it 'redirects to the services index with alert' do
        post :create, params: { project_id: project.id, service: service_params }
        expect(response).to redirect_to(project_services_path(project))
        expect(flash[:alert]).to eq('Service could not be created.')
      end
    end
  end

  describe 'PUT #update' do
    let(:new_attributes) { { name: 'Updated Service Name' } }

    context 'with valid params' do
      before do
        allow(Services::Update).to receive(:execute).and_return(double(success?: true))
      end

      it 'redirects to the services index' do
        put :update, params: { project_id: project.id, id: service.to_param, service: new_attributes }
        expect(response).to redirect_to(project_services_path(project))
        expect(flash[:notice]).to eq('Service will be updated on the next deploy.')
      end
    end

    context 'with invalid params' do
      before do
        allow(Services::Update).to receive(:execute).and_return(double(success?: false))
      end

      it 'redirects to the services index with alert' do
        put :update, params: { project_id: project.id, id: service.to_param, service: new_attributes }
        expect(response).to redirect_to(project_services_path(project))
        expect(flash[:alert]).to eq('Service could not be updated.')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested service' do
      service
      expect {
        delete :destroy, params: { project_id: project.id, id: service.to_param }
      }.to change(Service, :count).by(-1)
    end

    it 'redirects to the services list with notice' do
      delete :destroy, params: { project_id: project.id, id: service.to_param }
      expect(response).to redirect_to(project_services_path(project))
      expect(flash[:notice]).to eq('Service will be removed on the next deploy.')
    end
  end

  describe 'private methods' do
    describe '#set_service' do
      it 'sets the @service variable' do
        controller.send(:set_service)
        expect(assigns(:service)).to eq(service)
      end
    end

    describe '#service_params' do
      it 'permits the correct parameters' do
        expect(Service).to receive(:permitted_params).with(anything)
        controller.send(:service_params)
      end
    end
  end
end
