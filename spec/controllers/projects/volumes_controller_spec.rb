# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::VolumesController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, users: [user]) }
  let(:project) { create(:project, account: account) }
  let(:valid_attributes) { { name: 'Volume1', size: 10, access_mode: 'ReadWriteOnce', mount_path: '/data' } }
  let(:invalid_attributes) { { name: '', size: nil, access_mode: 'ReadWriteOnce', mount_path: '/data' } }

  before do
    sign_in user
    allow(controller).to receive(:current_account).and_return(account)
    allow(controller).to receive(:set_project).and_return(project)
  end

  describe 'GET #new' do
    it 'assigns a new volume as @volume' do
      get :new, params: { project_id: project.id }
      expect(assigns(:volume)).to be_a_new(Volume)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Volume' do
        expect {
          post :create, params: { project_id: project.id, volume: valid_attributes }
        }.to change(Volume, :count).by(1)
      end

      it 'redirects to the edit project path with notice' do
        post :create, params: { project_id: project.id, volume: valid_attributes }
        expect(response).to redirect_to(edit_project_path(project))
        expect(flash[:notice]).to eq("Volume saved and will be created on the next deployment")
      end
    end

    context 'with invalid params' do
      it 'does not create a new Volume' do
        expect {
          post :create, params: { project_id: project.id, volume: invalid_attributes }
        }.not_to change(Volume, :count)
      end

      it 'redirects to the edit project path with alert' do
        post :create, params: { project_id: project.id, volume: invalid_attributes }
        expect(response).to redirect_to(edit_project_path(project))
        expect(flash[:alert]).to eq("Failed to create volume")
      end
    end
  end

  describe 'DELETE #destroy' do
    let!(:volume) { create(:volume, project: project) }

    context 'when volume exists' do
      it 'destroys the requested volume' do
        expect {
          delete :destroy, params: { project_id: project.id, id: volume.to_param }
        }.to change(Volume, :count).by(-1)
      end

      it 'redirects to the edit project path with notice' do
        delete :destroy, params: { project_id: project.id, id: volume.to_param }
        expect(response).to redirect_to(edit_project_path(project))
        expect(flash[:notice]).to eq("Volume deleted and will be removed on the next deployment")
      end
    end

    context 'when volume cannot be destroyed' do
      before do
        allow_any_instance_of(Volume).to receive(:destroy).and_return(false)
      end

      it 'does not destroy the requested volume' do
        expect {
          delete :destroy, params: { project_id: project.id, id: volume.to_param }
        }.not_to change(Volume, :count)
      end

      it 'redirects to the edit project path with alert' do
        delete :destroy, params: { project_id: project.id, id: volume.to_param }
        expect(response).to redirect_to(edit_project_path(project))
        expect(flash[:alert]).to eq("Failed to delete volume")
      end
    end
  end

  describe 'private methods' do
    describe '#volume_params' do
      it 'permits the correct parameters' do
        params = { volume: valid_attributes }
        expect(controller.send(:volume_params)).to eq(params[:volume].permit(:name, :size, :access_mode, :mount_path))
      end
    end
  end
end
