# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::EnvironmentVariablesController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, users: [user]) }
  let(:project) { create(:project, account: account) }
  let(:environment_variable) { create(:environment_variable, project: project) }

  before do
    allow(controller).to receive(:current_user).and_return(user)
    allow(controller).to receive(:current_account).and_return(account)
    allow(controller).to receive(:set_project).and_return(project)
  end

  describe 'GET #index' do
    it 'assigns @environment_variables' do
      get :index, params: { project_id: project.id }
      expect(assigns(:environment_variables)).to eq([environment_variable])
    end

    it 'renders the index template' do
      get :index, params: { project_id: project.id }
      expect(response).to render_template(:index)
    end
  end

  describe 'POST #create' do
    let(:environment_variables_params) { { environment_variables: [{ name: 'TEST_VAR', value: 'test_value' }] } }

    context 'when current deployment is present' do
      let(:deployment) { double('Deployment', id: 1) }

      before do
        allow(project).to receive(:current_deployment).and_return(deployment)
        allow(Projects::DeploymentJob).to receive(:perform_later).with(deployment)
      end

      it 'calls BulkUpdate and updates the project' do
        expect(EnvironmentVariables::BulkUpdate).to receive(:execute).with(project: project, params: environment_variables_params, current_user: user)
        expect(project).to receive(:updated!)

        post :create, params: { project_id: project.id, environment_variables: environment_variables_params }
      end

      it 'enqueues a deployment job' do
        post :create, params: { project_id: project.id, environment_variables: environment_variables_params }
        expect(Projects::DeploymentJob).to have_received(:perform_later).with(deployment)
      end

      it 'redirects with a notice about deployment' do
        post :create, params: { project_id: project.id, environment_variables: environment_variables_params }
        expect(response).to redirect_to(project_environment_variables_path(project))
        expect(flash[:notice]).to eq('Deployment started to apply new environment variables.')
      end
    end

    context 'when current deployment is not present' do
      before do
        allow(project).to receive(:current_deployment).and_return(nil)
      end

      it 'redirects with a notice about future deployment' do
        post :create, params: { project_id: project.id, environment_variables: environment_variables_params }
        expect(response).to redirect_to(project_environment_variables_path(project))
        expect(flash[:notice]).to eq('Environment variables will be applied on the next deployment.')
      end
    end
  end

  describe 'DELETE #destroy' do
    before do
      allow(project.environment_variables).to receive(:find).with(environment_variable.id.to_s).and_return(environment_variable)
      allow(Projects::DeploymentJob).to receive(:perform_later)
    end

    context 'when current deployment is present' do
      let(:deployment) { double('Deployment', id: 1) }

      before do
        allow(project).to receive(:current_deployment).and_return(deployment)
      end

      it 'destroys the environment variable' do
        expect(environment_variable).to receive(:destroy)
        delete :destroy, params: { project_id: project.id, id: environment_variable.id }
      end

      it 'enqueues a deployment job' do
        delete :destroy, params: { project_id: project.id, id: environment_variable.id }
        expect(Projects::DeploymentJob).to have_received(:perform_later).with(deployment)
      end

      it 'renders a turbo stream remove' do
        delete :destroy, params: { project_id: project.id, id: environment_variable.id }
        expect(response.body).to include("turbo-stream")
      end
    end

    context 'when current deployment is not present' do
      before do
        allow(project).to receive(:current_deployment).and_return(nil)
      end

      it 'destroys the environment variable without enqueuing a job' do
        expect(environment_variable).to receive(:destroy)
        delete :destroy, params: { project_id: project.id, id: environment_variable.id }
        expect(Projects::DeploymentJob).not_to have_received(:perform_later)
      end
    end
  end
end
