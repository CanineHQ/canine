# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::ProjectAddOnsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, owner: user) }
  let(:project) { create(:project, account: account) }
  let(:add_on) { create(:add_on, account: account) }
  let!(:project_add_on) { create(:project_add_on, project: project, add_on: add_on) }

  before do
    allow(controller).to receive(:current_account).and_return(account)
    sign_in(user)
  end

  describe 'GET #index' do
    it 'assigns all project add-ons as @project_add_ons' do
      get :index, params: { project_id: project.id }
      expect(assigns(:project_add_ons)).to eq([project_add_on])
    end
  end

  describe 'GET #new' do
    it 'assigns a new project add-on as @project_add_on' do
      get :new, params: { project_id: project.id }
      expect(assigns(:project_add_on)).to be_a_new(ProjectAddOn)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      let(:valid_params) { { project_id: project.id, project_add_on: { add_on_id: add_on.id } } }

      it 'creates a new ProjectAddOn' do
        expect {
          post :create, params: valid_params
        }.to change(ProjectAddOn, :count).by(1)
      end

      it 'redirects to the created project add-on' do
        post :create, params: valid_params
        expect(response).to redirect_to(project_project_add_on_path(project, ProjectAddOn.last))
      end
    end

    context 'with invalid params' do
      let(:invalid_params) { { project_id: project.id, project_add_on: { add_on_id: nil } } }

      it 'does not create a new ProjectAddOn' do
        expect {
          post :create, params: invalid_params
        }.not_to change(ProjectAddOn, :count)
      end

      it 'renders the new template' do
        post :create, params: invalid_params
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PATCH #update' do
    context 'with valid params' do
      let(:new_add_on) { create(:add_on, account: account) }
      let(:valid_params) { { project_id: project.id, id: project_add_on.id, project_add_on: { add_on_id: new_add_on.id } } }

      it 'updates the requested project add-on' do
        patch :update, params: valid_params
        project_add_on.reload
        expect(project_add_on.add_on_id).to eq(new_add_on.id)
      end

      it 'redirects to the project add-on' do
        patch :update, params: valid_params
        expect(response).to redirect_to(project_project_add_on_path(project, project_add_on))
      end
    end

    context 'with invalid params' do
      let(:invalid_params) { { project_id: project.id, id: project_add_on.id, project_add_on: { add_on_id: nil } } }

      it 'does not update the project add-on' do
        patch :update, params: invalid_params
        project_add_on.reload
        expect(project_add_on.add_on_id).to eq(add_on.id)
      end

      it 'renders the edit template' do
        patch :update, params: invalid_params
        expect(response).to render_template(:edit)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested project add-on' do
      expect {
        delete :destroy, params: { project_id: project.id, id: project_add_on.id }
      }.to change(ProjectAddOn, :count).by(-1)
    end

    it 'redirects to the project add-ons list' do
      delete :destroy, params: { project_id: project.id, id: project_add_on.id }
      expect(response).to redirect_to(project_project_add_ons_path(project))
    end
  end

  private

  def sign_in(user)
    allow(controller).to receive(:authenticate_user!).and_return(true)
    allow(controller).to receive(:current_user).and_return(user)
  end
end
