# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::ProcessesController, type: :controller do
  let(:user) { create(:user) }
  let(:project) { create(:project, accounts: [user.accounts.first]) }
  let(:cluster) { create(:cluster, accounts: [user.accounts.first]) }
  let(:pod_id) { "test-pod" }
  let(:kubectl) { instance_double(K8::Kubectl) }
  let(:client) { instance_double(K8::Client) }

  before do
    sign_in user
    allow(controller).to receive(:current_account).and_return(user.accounts.first)
    allow(K8::Kubectl).to receive(:from_project).and_return(kubectl)
    allow(K8::Client).to receive(:from_project).and_return(client)
    allow(K8::Client).to receive(:new).and_return(client)
  end

  describe 'GET #index' do
    it 'retrieves pods for the project' do
      allow(client).to receive(:get_pods).and_return([])
      get :index, params: { project_id: project.id }
      expect(assigns(:pods)).to eq([])
    end
  end

  describe 'POST #create' do
    let(:pod) { instance_double(K8::Stateless::Pod, to_yaml: "---", name: pod_id) }

    before do
      allow(K8::Stateless::Pod).to receive(:new).and_return(pod)
    end

    it 'creates a new pod and redirects to the project processes path' do
      allow(kubectl).to receive(:apply_yaml).with("---")
      post :create, params: { project_id: project.id }
      expect(response).to redirect_to(project_processes_path(project))
      expect(flash[:notice]).to eq("One off pod #{pod.name} created")
    end
  end

  describe 'GET #show' do
    it 'retrieves logs for the specified pod' do
      allow(client).to receive(:get_pod_log).with(pod_id, project.name).and_return("log data")
      get :show, params: { project_id: project.id, id: pod_id }
      expect(assigns(:logs)).to eq("log data")
    end
  end

  describe 'DELETE #destroy' do
    it 'deletes the specified pod and redirects to the project processes path' do
      allow(client).to receive(:delete_pod).with(pod_id, project.name)
      delete :destroy, params: { project_id: project.id, id: pod_id }
      expect(response).to redirect_to(project_processes_path(project))
      expect(flash[:notice]).to eq("Pod #{pod_id} terminating...")
    end
  end
end
