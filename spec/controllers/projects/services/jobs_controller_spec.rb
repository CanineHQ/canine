# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::Services::JobsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, user: user) }
  let(:project) { create(:project, account: account) }
  let(:service) { create(:service, project: project) }
  let(:kubeconfig) { "dummy_kubeconfig" }
  let(:kubectl) { instance_double(K8::Kubectl) }

  before do
    allow(controller).to receive(:current_account).and_return(account)
    allow(K8::Kubectl).to receive(:from_project).with(project).and_return(kubectl)
    allow(kubectl).to receive(:call).and_return(true)
    sign_in(user)
  end

  describe 'POST #create' do
    subject { post :create, params: { project_id: project.id, service_id: service.id } }

    context 'when job is successfully created' do
      it 'calls kubectl with the correct command' do
        timestamp = Time.current.strftime('%Y%m%d%H%M%S')
        job_name = "#{service.name}-manual-#{timestamp}"
        expect(kubectl).to receive(:call).with(
          "-n #{project.name} create job #{job_name} --from=cronjob/#{service.name}"
        )
        subject
      end

      it 'redirects to project services path with a success notice' do
        timestamp = Time.current.strftime('%Y%m%d%H%M%S')
        job_name = "#{service.name}-manual-#{timestamp}"
        subject
        expect(response).to redirect_to(project_services_path(project))
        expect(flash[:notice]).to eq("Job #{job_name} created.")
      end
    end

    context 'when job creation fails' do
      before do
        allow(kubectl).to receive(:call).and_raise(StandardError, 'Kubernetes error')
      end

      it 'redirects to project services path with an error notice' do
        subject
        expect(response).to redirect_to(project_services_path(project))
        expect(flash[:alert]).to eq('Failed to create job.')
      end
    end

    context 'when project is not found' do
      it 'raises ActiveRecord::RecordNotFound' do
        expect {
          post :create, params: { project_id: 'invalid', service_id: service.id }
        }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end

    context 'when service is not found' do
      it 'raises ActiveRecord::RecordNotFound' do
        expect {
          post :create, params: { project_id: project.id, service_id: 'invalid' }
        }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end
end
