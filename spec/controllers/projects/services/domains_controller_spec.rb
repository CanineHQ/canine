# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::Services::DomainsController, type: :controller do
  let(:account) { create(:account) }
  let(:user) { create(:user, accounts: [account]) }
  let(:project) { create(:project, account: account) }
  let(:service) { create(:service, project: project) }
  let(:domain_params) { { domain_name: 'example.com' } }

  before do
    allow(controller).to receive(:current_user).and_return(user)
    allow(controller).to receive(:current_account).and_return(account)
    request.session[:account_id] = account.id
  end

  describe 'POST #create' do
    context 'with valid parameters' do
      it 'creates a new domain' do
        expect {
          post :create, params: { project_id: project.id, service_id: service.id, domain: domain_params }
        }.to change(service.domains, :count).by(1)
      end

      it 'triggers the AddDomainJob' do
        expect(Services::AddDomainJob).to receive(:perform_later).with(instance_of(Domain))
        post :create, params: { project_id: project.id, service_id: service.id, domain: domain_params }
      end

      it 'redirects to the project path with a notice' do
        post :create, params: { project_id: project.id, service_id: service.id, domain: domain_params }
        expect(response).to redirect_to(project_path(project))
        expect(flash[:notice]).to eq('Domain was successfully added.')
      end

      it 'responds with JSON format' do
        post :create, params: { project_id: project.id, service_id: service.id, domain: domain_params, format: :json }
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end

      it 'responds with Turbo Stream format' do
        post :create, params: { project_id: project.id, service_id: service.id, domain: domain_params, format: :turbo_stream }
        expect(response).to render_template(:create)
      end
    end

    context 'with invalid parameters' do
      let(:invalid_domain_params) { { domain_name: '' } }

      it 'does not create a new domain' do
        expect {
          post :create, params: { project_id: project.id, service_id: service.id, domain: invalid_domain_params }
        }.not_to change(service.domains, :count)
      end

      it 'renders the new template with unprocessable entity status' do
        post :create, params: { project_id: project.id, service_id: service.id, domain: invalid_domain_params }
        expect(response).to render_template(:new)
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it 'responds with JSON format' do
        post :create, params: { project_id: project.id, service_id: service.id, domain: invalid_domain_params, format: :json }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'GET #check_dns' do
    it 'executes the DNS check' do
      ingress_double = instance_double(K8::Stateless::Ingress)
      allow(K8::Stateless::Ingress).to receive(:new).with(service).and_return(ingress_double)
      expect(Networks::CheckDns).to receive(:execute).with(ingress: ingress_double)

      get :check_dns, params: { project_id: project.id, service_id: service.id }
      expect(response).to render_template(partial: 'projects/services/domains/index')
    end
  end

  describe 'DELETE #destroy' do
    let!(:domain) { create(:domain, service: service, project: project) }

    it 'destroys the domain' do
      expect {
        delete :destroy, params: { project_id: project.id, service_id: service.id, id: domain.id }
      }.to change(service.domains, :count).by(-1)
    end

    it 'responds with Turbo Stream format' do
      delete :destroy, params: { project_id: project.id, service_id: service.id, id: domain.id }
      expect(response.media_type).to eq('text/vnd.turbo-stream.html')
    end
  end
end
