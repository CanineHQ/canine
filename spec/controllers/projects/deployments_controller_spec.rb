# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::DeploymentsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, users: [user]) }
  let(:project) { create(:project, account:) }
  let(:build) { create(:build, project:) }

  before do
    allow(controller).to receive(:current_user).and_return(user)
    allow(controller).to receive(:current_account).and_return(account)
  end

  describe 'GET #index' do
    let!(:event) { create(:event, project:) }

    it 'assigns @events and paginates them' do
      get :index, params: { project_id: project.id }
      expect(assigns(:events)).to include(event)
      expect(assigns(:pagy)).to be_present
    end
  end

  describe 'GET #show' do
    it 'assigns the requested build as @build' do
      get :show, params: { project_id: project.id, id: build.id }
      expect(assigns(:build)).to eq(build)
    end
  end

  describe 'POST #redeploy' do
    context 'when redeploy is successful' do
      it 'creates a new build and redirects with a notice' do
        expect {
          post :redeploy, params: { project_id: project.id, id: build.id }
        }.to change(Build, :count).by(1)

        expect(response).to redirect_to(root_projects_path(project, Build.last))
        expect(flash[:notice]).to eq('Redeploying...')
      end
    end

    context 'when redeploy fails' do
      before do
        allow_any_instance_of(Build).to receive(:save).and_return(false)
      end

      it 'redirects with an alert' do
        post :redeploy, params: { project_id: project.id, id: build.id }
        expect(response).to redirect_to(root_projects_path(project))
        expect(flash[:alert]).to eq('Failed to redeploy')
      end
    end
  end

  describe 'POST #deploy' do
    context 'when deployment is successful' do
      before do
        allow(Projects::DeployLatestCommit).to receive(:execute).and_return(double(success?: true))
      end

      it 'redirects to the project with a notice' do
        post :deploy, params: { project_id: project.id }
        expect(response).to redirect_to(project)
        expect(flash[:notice]).to eq('Deploying project...')
      end
    end

    context 'when deployment fails' do
      before do
        allow(Projects::DeployLatestCommit).to receive(:execute).and_return(double(success?: false))
      end

      it 'redirects to the project with an alert' do
        post :deploy, params: { project_id: project.id }
        expect(response).to redirect_to(project)
        expect(flash[:alert]).to eq('Failed to deploy project')
      end
    end
  end

  describe 'private #set_build' do
    it 'assigns the requested build to @build' do
      controller.params = { project_id: project.id, id: build.id }
      controller.send(:set_build)
      expect(assigns(:build)).to eq(build)
    end

    it 'raises ActiveRecord::RecordNotFound if build is not found' do
      expect {
        controller.params = { project_id: project.id, id: 'non-existent' }
        controller.send(:set_build)
      }.to raise_error(ActiveRecord::RecordNotFound)
    end
  end
end
