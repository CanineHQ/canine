# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Projects::MetricsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, users: [user]) }
  let(:project) { create(:project, account: account) }
  let(:cluster) { double('Cluster', metrics: metrics) }
  let(:metrics) { double('Metrics') }

  before do
    allow(controller).to receive(:current_account).and_return(account)
    allow(controller).to receive(:set_project).and_return(project)
    allow(project).to receive(:cluster).and_return(cluster)
    sign_in user
  end

  describe 'GET #index' do
    let(:pod_metrics) { double('PodMetrics') }
    let(:project_metrics) { double('ProjectMetrics') }

    before do
      allow(K8::Metrics::Api::Pod).to receive(:fetch).with(cluster, project.name).and_return(pod_metrics)
      allow(metrics).to receive(:for_project).with(project).and_return(project_metrics)
      allow(project_metrics).to receive(:order).with(created_at: :desc).and_return(project_metrics)
      allow(project_metrics).to receive(:limit).with(1000).and_return(project_metrics)
    end

    it 'fetches pod metrics and assigns to @pods' do
      get :index, params: { project_id: project.id }
      expect(assigns(:pods)).to eq(pod_metrics)
    end

    it 'fetches project metrics and assigns to @metrics' do
      get :index, params: { project_id: project.id }
      expect(assigns(:metrics)).to eq(project_metrics)
    end
  end

  describe '#parse_cpu_metrics' do
    subject { controller.send(:parse_cpu_metrics, metrics) }

    let(:metrics) do
      [
        double('Metric', cpu?: true, tag_value: 'pod1', created_at: Time.now, metadata: { "cpu" => 100, "total_cpu" => 200 }),
        double('Metric', cpu?: true, tag_value: 'pod2', created_at: Time.now, metadata: { "cpu" => 50, "total_cpu" => 100 }),
        double('Metric', cpu?: false)
      ]
    end

    it 'parses CPU metrics' do
      result = subject
      expect(result).to include(
        { name: 'pod1', data: { metrics[0].created_at => 50.0 } },
        { name: 'pod2', data: { metrics[1].created_at => 50.0 } }
      )
    end
  end

  describe '#parse_memory_metrics' do
    subject { controller.send(:parse_memory_metrics, metrics) }

    let(:metrics) do
      [
        double('Metric', memory?: true, tag_value: 'pod1', created_at: Time.now, metadata: { "memory" => 200, "total_memory" => 400 }),
        double('Metric', memory?: true, tag_value: 'pod2', created_at: Time.now, metadata: { "memory" => 100, "total_memory" => 200 }),
        double('Metric', memory?: false)
      ]
    end

    it 'parses memory metrics' do
      result = subject
      expect(result).to include(
        { name: 'pod1', data: { metrics[0].created_at => 50.0 } },
        { name: 'pod2', data: { metrics[1].created_at => 50.0 } }
      )
    end
  end
end
