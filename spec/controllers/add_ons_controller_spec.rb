# Autogenerated by autotester

require 'rails_helper'

RSpec.describe AddOnsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, owner: user) }
  let(:cluster) { create(:cluster, account: account) }
  let(:add_on) { create(:add_on, cluster: cluster) }
  let(:valid_attributes) { attributes_for(:add_on).merge(cluster_id: cluster.id) }
  let(:invalid_attributes) { { chart_type: nil, name: nil } }

  before do
    sign_in user
    allow(controller).to receive(:current_account).and_return(account)
  end

  describe 'GET #index' do
    it 'returns a success response' do
      get :index
      expect(response).to be_successful
    end
  end

  describe 'GET #search' do
    context 'when search is successful' do
      it 'returns a success response with json' do
        allow(AddOns::HelmChartDetails).to receive(:execute).and_return(double(success?: true, response: { data: 'result' }))
        get :search, params: { q: 'redis' }
        expect(response).to be_successful
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context 'when search fails' do
      it 'returns an error response with json' do
        allow(AddOns::HelmChartDetails).to receive(:execute).and_return(double(success?: false))
        get :search, params: { q: 'invalid' }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: { id: add_on.to_param }
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    before do
      allow_any_instance_of(AddOn).to receive(:chart_definition).and_return('some_definition')
    end

    it 'returns a success response' do
      get :edit, params: { id: add_on.to_param }
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new AddOn' do
        expect {
          post :create, params: { add_on: valid_attributes }
        }.to change(AddOn, :count).by(1)
      end

      it 'redirects to the created add_on' do
        post :create, params: { add_on: valid_attributes }
        expect(response).to redirect_to(AddOn.last)
      end
    end

    context 'with invalid params' do
      it 'does not create a new AddOn' do
        expect {
          post :create, params: { add_on: invalid_attributes }
        }.to change(AddOn, :count).by(0)
      end

      it 'renders the new template' do
        post :create, params: { add_on: invalid_attributes }
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PATCH/PUT #update' do
    context 'with valid params' do
      let(:new_attributes) { { name: 'new-addon' } }

      it 'updates the requested add_on' do
        patch :update, params: { id: add_on.to_param, add_on: new_attributes }
        add_on.reload
        expect(add_on.name).to eq('new-addon')
      end

      it 'redirects to the add_on' do
        patch :update, params: { id: add_on.to_param, add_on: new_attributes }
        expect(response).to redirect_to(add_on)
      end
    end

    context 'with invalid params' do
      it 'renders the edit template' do
        patch :update, params: { id: add_on.to_param, add_on: invalid_attributes }
        expect(response).to render_template(:edit)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested add_on' do
      add_on_to_delete = create(:add_on, cluster: cluster)
      expect {
        delete :destroy, params: { id: add_on_to_delete.to_param }
      }.to change(AddOn, :count).by(-1)
    end

    it 'redirects to the add_ons list' do
      delete :destroy, params: { id: add_on.to_param }
      expect(response).to redirect_to(add_ons_url)
    end
  end

  describe 'POST #restart' do
    before do
      allow_any_instance_of(K8::Helm::Service).to receive(:restart).and_return(true)
    end

    it 'restarts the service and redirects to the add_on' do
      post :restart, params: { id: add_on.to_param }
      expect(response).to redirect_to(add_on)
      expect(flash[:notice]).to eq("Add on #{add_on.name} restarted")
    end
  end
end
