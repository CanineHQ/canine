# Autogenerated by autotester

require 'rails_helper'

RSpec.describe Clusters::MetricsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, user: user) }
  let(:cluster) { create(:cluster, account: account) }
  let(:metrics) { create_list(:metric, 5, cluster: cluster) }

  before do
    sign_in user
    allow(Cluster).to receive(:find).and_return(cluster)
  end

  describe 'GET #show' do
    context 'when the cluster exists' do
      let(:node_metrics) { instance_double("K8::Metrics::Api::Node", ls: metrics) }

      before do
        allow(K8::Metrics::Api::Node).to receive(:ls).with(cluster).and_return(node_metrics)
        get :show, params: { cluster_id: cluster.id }
      end

      it 'assigns @nodes' do
        expect(assigns(:nodes)).to eq(node_metrics)
      end

      it 'assigns @metrics' do
        expect(assigns(:metrics)).to eq(cluster.metrics.node_only_tags.order(created_at: :desc).limit(1000))
      end

      it 'renders the show template' do
        expect(response).to render_template(:show)
      end
    end

    context 'when the cluster does not exist' do
      it 'raises ActiveRecord::RecordNotFound' do
        expect {
          get :show, params: { cluster_id: -1 }
        }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end

  describe 'helper methods' do
    describe '#parse_cpu_metrics' do
      let(:cpu_metric) { instance_double("Metric", cpu?: true, metadata: { "cpu" => 50, "total_cpu" => 100 }, created_at: Time.current) }
      let(:non_cpu_metric) { instance_double("Metric", cpu?: false) }

      it 'parses CPU metrics correctly' do
        result = controller.parse_cpu_metrics([cpu_metric, non_cpu_metric])
        expect(result).to eq({ cpu_metric.created_at => 50 })
      end
    end

    describe '#parse_memory_metrics' do
      let(:memory_metric) { instance_double("Metric", memory?: true, metadata: { "memory" => 1024, "total_memory" => 2048 }, created_at: Time.current) }
      let(:non_memory_metric) { instance_double("Metric", memory?: false) }

      it 'parses memory metrics correctly' do
        result = controller.parse_memory_metrics([memory_metric, non_memory_metric])
        expect(result).to eq({ memory_metric.created_at => 50 })
      end
    end
  end
end
