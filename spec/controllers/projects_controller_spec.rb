# Autogenerated by autotester

require 'rails_helper'

RSpec.describe ProjectsController, type: :controller do
  let(:user) { create(:user) }
  let(:account) { create(:account, owner: user) }
  let(:project) { create(:project, account: account) }

  before do
    sign_in user
    allow(controller).to receive(:current_account).and_return(account)
  end

  describe 'GET #index' do
    before do
      create_list(:project, 3, account: account)
    end

    it 'assigns @projects with sorting' do
      get :index
      expect(assigns(:projects)).to match_array(account.projects.order(created_at: :asc))
    end
  end

  describe 'GET #show' do
    it 'assigns @events and renders the deployments index template' do
      get :show, params: { id: project.id }
      expect(assigns(:events)).to eq(project.events.order(created_at: :desc))
      expect(response).to render_template('projects/deployments/index')
    end
  end

  describe 'GET #new' do
    it 'assigns a new project' do
      get :new
      expect(assigns(:project)).to be_a_new(Project)
    end
  end

  describe 'POST #create' do
    let(:project_params) { attributes_for(:project) }

    context 'with valid params' do
      it 'creates a new Project' do
        expect {
          post :create, params: { project: project_params }
        }.to change(Project, :count).by(1)
      end

      it 'redirects to the created project' do
        post :create, params: { project: project_params }
        expect(response).to redirect_to(Project.last)
      end
    end

    context 'with invalid params' do
      before do
        allow_any_instance_of(Project).to receive(:save).and_return(false)
      end

      it 'renders the new template' do
        post :create, params: { project: { name: nil } }
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PATCH #update' do
    context 'with valid params' do
      it 'updates the project and redirects' do
        patch :update, params: { id: project.id, project: { name: 'Updated Name' } }
        project.reload
        expect(project.name).to eq('Updated Name')
        expect(response).to redirect_to(project)
      end
    end

    context 'with invalid params' do
      it 'renders the edit template' do
        patch :update, params: { id: project.id, project: { name: nil } }
        expect(response).to render_template(:edit)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested project' do
      project # ensure the project is created
      expect {
        delete :destroy, params: { id: project.id }
      }.to change(Project, :count).by(-1)
    end

    it 'redirects to the projects list' do
      delete :destroy, params: { id: project.id }
      expect(response).to redirect_to(projects_path)
    end
  end

  describe 'POST #restart' do
    let(:restart_service) { instance_double(Projects::Restart, success?: true) }

    before do
      allow(Projects::Restart).to receive(:execute).and_return(restart_service)
    end

    context 'when restart is successful' do
      it 'redirects to the project with success notice' do
        post :restart, params: { id: project.id }
        expect(response).to redirect_to(project_url(project))
        expect(flash[:notice]).to eq('All services have been restarted')
      end
    end

    context 'when restart fails' do
      before do
        allow(restart_service).to receive(:success?).and_return(false)
      end

      it 'redirects to the project with alert message' do
        post :restart, params: { id: project.id }
        expect(response).to redirect_to(project_url(project))
        expect(flash[:alert]).to eq('Failed to restart all services')
      end
    end
  end
end
